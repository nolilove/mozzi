7주차_월요일 메모(23.10.04 Mon)
개요 키워드: VPC, 배스쳔(Bastion), 피어링, SSM, NAT게이트웨이
#VPC
1.VPC 생성			*** CIDR.xyz 홈페이지 참조
Classless Inter-Domain Routing(CIDR) 정의 10.0.0.0 /16		
 my-vpc-1 
 CIDR 정의 10.0.0.0 /16
2.서브넷만들기 
 my-public-subnet-1
 CIDR정의 10.0.1.0 /24
 my-public-subnet-2
 CIDR정의 10.0.2.0 /24
---------------------------
 my-public-subnet-3
 CIDR정의 10.0.3.0 /24
my-public-subnet-4
 CIDR정의 10.0.4.0 /24
------------------------
bastion server : 10.0.1.187 (프라이빗아이피주소)
private server-1 : 10.0.2.66
private server-2 : 10.0.3.90
#1. VPC 실습 
vpc 콘솔창을 추가한다. 'VPC_격리형 프라이빗 리소스'
VPC를 만들고 그다음으로 서브넷을 vpc에 연결하는 단계를 거친다.

VPC 생성> (수동으로 할때)VPC만 or (자동으로 할때)VPC등 선택
VPC이름: my-vpc-1
IPv4 CIDR 수동입력: 10.0.0.0/16   만 수정한뒤 선택

VPC를 만들었으니 서브넷창으로 이동.
my-vpc-1 를 선택하면 vpc cidr값도 자동으로 나온다.
서브넷 이름: my-public-subnet-1
가용영역: 2a 
IPv4 subnet CIDR block 을 10.0.1.0/24 으로 변경 후 생성한다. 
 
>이것처럼 서브넷을 총 4개를 생성하면 된다. my-public-subnet-1~4
이렇게 서브넷을 생성하면 라우팅테이블이 자동으로 생성되는 점을 참고하자. 이름을 변경하자
my-public-1-rt

라우팅 테이블> 서브넷 연결 편집에서 명시적 서브넷 연결에 위의 서브넷4개를 모두 연동해준다.
(Default 설정은 묵시적 기본 서브넷을 따르기 때문이다.)
########
이제 프라이빗 서브넷을 생성해본다.
my-private-subnet-1
가용영역을 2c로 설정
IPv4 subnet CIDR block : 10.0.2.0/24  설정후 생성.
(라우팅테이블이 자동연결안되면 '서브넷연결'에서 서브넷과 연결해주자)

my-private-subnet-2
가용영역을 2c로 설정
IPv4 subnet CIDR block : 10.0.3.0/24  설정후 생성.
(라우팅테이블이 자동연결안되면 '서브넷연결'에서 서브넷과 연결해주자)
#########
인터넷게이트웨이 생성
my-igw-1
이름만 정했기 때문에 VPC에 연결해줘야 한다.
아까만든 my-vpc-1에 연결해주자.

##########
서브넷에서 my-public-subnet-1에서 아이디로 들어가면, 퍼블릭 ipv4주소 자동할당이: 아니요 로 설정되어있는것을 알 수 있다. >'작업'으로 들어가서 '서브넷 설정편집' >
퍼블릭 IPv4 주소 자동 할당 활성화를 체크한다.

##########
EC2 3개의 인스턴스를 생성 ( Bastion 서버 사용 )
public-bastion-server-1
네트워크설정에서 my vpc 1 선택
서브넷 public subnet 1 선택
여기서 '퍼블릭ip 자동할당'을 주의깊게 보자. 
기존 보안그룹 default로 설정		후 인스턴스 생성.

private-2c-server-1 과 private-2c-server-2를 생성하자.
private subent 1, 2를 선택
퍼블릭 ip자동할당 비활성화를 선택한다.

bastion server : 52.78.220.110  퍼블릭아이피주소 
private server-1 : 10.0.2.66 (프라이빗아이피주소)
private server-2 : 10.0.3.90 (프라이빗아이피주소)	메모하자.

**  c:\aws_keys\ 에 보관해두자 키를 (All-Machine-Key)
 
대충 키파일을 notepad를 사용해 열어보면 이렇게 암호화되어있다.

Xftp를 홈페이지에서 다운로드한다.
새 세션 만들기> bastion-server , 공인아이피 52.78.220.110 를 호스트에 넣는다.
퍼블릭키만을 체크하고 설정>올 머신 키를 넣고 연결

보안그룹에서 모든트래픽 허용해야 연결된다고 할 것인데, 안되었다.
서브넷에서 퍼블릭쪽 서브넷 라우팅 테이블을 보자.
my-public-1-rt 라우팅 편집에 들어가서
0.0.0.0/0 , 대상은 인터넷 게이트웨이 my-igw-1를 선택하여 저장한다.

이러면 연결이되는데 호스트키 수락및 저장, 사용자 이름을 ec2-user 를 입력하면 접속됨.
#################
접속해서 
C:\aws_keys 에있는 올머신키를 bastion-server세션의 /home/ec2-user 디렉토리에 폴더 동기화하거나 옮겨준다. 

이러고 인스턴스 연결할랫드만
Failed to connect to your instance
Error establishing SSH connection to your instance. Try again later. 라는 오류가 뜬다.
xshell로 세션접속을 해본다 (ssh로그인)

해결법: 연결이 안되는 해당 인스턴스에 SSH로 접속한뒤에,
[ec2-user@ip-10-0-1-187 ~]$ sudo ssh -i All-Machine-Key.pem ec2-user@10.0.2.66  를 입력하면 접속이 된다.
프라이빗서버 1이 됐으면 exit로 서버2에도 연결해본다. (된다)
성공했으면 핑을 다른 프라이빗서버에 날려주자 [ 10.0.3.90 > ping 10.0.2.66 ]
[ec2-user@ip-10-0-3-90 ~]$ ping 10.0.2.66
PING 10.0.2.66 (10.0.2.66) 56(84) bytes of data.
8 packets transmitted, 8 received, 0% packet loss, time 7290ms
rtt min/avg/max/mdev = 0.439/0.508/0.672/0.070 ms			아주잘된다.

위의 상태는 외부와의 연결이 차단되어있는 내부 네트워킹 상태이고, 이때는 yum 명령어로 어떤 패키지를 설치하지 못할뿐더러 핑 8.8.8.8(구글)도 deny된다.
프라이빗 연결은 일반적으로는 안되며, 이때는 EC2 인스턴스 연결- '엔드포인트를 사용하여 연결'을 선택하는방법이 있다. 이때는 VPC- 엔드포인트 생성(몇분정도 걸린다) 을 하고 연결하면 잘 접속이 된다. 물론 이때도 내부핑만 된다

-다음단계는 NAT를 구성하는것이다. (NAT 게이트웨이는 요금이 빡셈)
my-nat-gtw-1
서브넷은 'my public subnet 1'를 선택 (***nat 게이트웨이는 인터넷 통신이 되어야 한다)
탄력적 아이피할당을 하고 퍼블릭연결을 선택후 생성하면
pending 상태로 생성되며 시간을 좀 가져야 한다.
available 상태로 변경이되면 라우팅테이블로 이동> private 2 선택>라우팅 편집>라우팅 추가>0.0.0.0/0 대상:my-nat-gtw-1 를 선택하고 저장하자.

xshell로 와서 
[ec2-user@ip-10-0-3-90 ~]$ hostname   를 입력
sudo ssh -i All-Machine-Key.pem ec2-user@10.0.3.90로 접속해본다>>이건 오류남.

그러면, sudo -s로 들어가본다
pwd로 홈디렉토리를 확인한다. /home/ec2-user   파일이 있다면 삭제한다
[root@ip-10-0-3-90 ec2-user]# vim All-Machine-Key.pem 로 원래 올머신키에 있는걸 notepad로 열고, ctrl+A로 모두 복사붙여넣기한다 그리고 저장. 
[root@ip-10-0-3-90 ec2-user]# chmod 400 All-Machine-Key.pem  로 권한부여하자. 복구하려면 [root@ip-10-0-3-90 ec2-user]# chmod 644 All-Machine-Key.pem  를 다시입력.

[root@ip-10-0-3-90 ec2-user]# ssh -i All-Machine-Key.pem  root@10.0.2.66 하면 접속안됨.
[ec2-user@ip-10-0-3-90 ~]$ sudo ssh -i "All-Machine-Key.pem" ec2-user@10.0.2.66  하면 잘 접속된다


작업이 끝났다면, 요금이 발생하는 
1. 'NAT게이트웨이' 삭제
2. '탄력적 ip주소를 모두 릴리즈'		하도록 하자.

***정리***
Private ip로 인스턴스에 연결하고싶다면 다음 단계를 따른다.
1.VPC를 생성하고 public & private subnet을 생성해준다
2.Public subnet에 NAT gateway를 생성하고, Private subnet에서 인터넷으로 트래픽을 전달하도록 설정한다 
-"NAT Gateway 생성"을 클릭하고, 생성할 NAT Gateway의 가용 영역(subnet)을 선택.
- NAT Gateway를 생성한 후, "Elastic IP 주소 할당"을 클릭하여 Elastic IP 주소를 할당.
3.Private subnet의 라우팅테이블로 들어가서 NAT gateway로의 트래픽을 전달받을 수 있도록 (0.0.0.0/0 , 대상은 'nat게이트웨이' ) 설정한다
4. VPC탭에서 보안그룹 및 네트워크ACL를 구성해서 허용해야될 트래픽을 관리한다.
5.이게 되었다면 SSH를 통해서 EC2 인스턴스에 연결해보고 테스트한다
6.터미널 애플리케이션(우리의 경우 Xshell) 을 연다
     - 터미널에서 다음 명령어를 사용하여 EC2 인스턴스에 연결합니다:
       ssh -i [키페어 파일 경로] [사용자명]@[EC2 인스턴스 퍼블릭 IP 주소]
       ex) ssh -i "All-Machine-Key.pem" ec2-user@10.0.2.66
7. 잘 됐으면 예제 명령어들을 입력해서 테스트함
sudo yum update
sudo yum install [패키지 이름] 등으로 외부 네트워크와 통신하는지 확인해볼 수 있다!


-라우팅테이블로 이동> default 라우팅에서 서브넷연결> 명시적 서브넷 연결 편집에서 2a가용영역을 추가해본다.
그다음으로 라우팅테이블 생성을 해본다
my-private-rt-1 생성. 다음으로 서브넷연결에 명시적 연결로 2c를 추가.
-인터넷 게이트웨이탭으로 이동>

인스턴스 생성> public-server-1
키페어를 새로 생성 Key-1
가용영역을 2a로 설정
퍼블릭아이피 자동할당 - 활성화
보안그룹 새로 생성해봄 launch-wizard-1를 my-sg-1 로 생성
이때 인바운드보안그룹규칙에 추가로 '모든트래픽 추가', 소스유형 위치무관 설정후 생성.

private-server-2 인스턴스도 추가
네트워크설정에서 서브넷을 2c로 설정 , 퍼블릭아이피 비활성화
기존보안그룹 my-sg-1		후 생성.

이후 public server에 '연결'. 
[ec2-user@ip-172-31-2-61 ~]$ pwd
/home/ec2-user
[ec2-user@ip-172-31-2-61 ~]$ vim Key-1.pem 를 입력해서 편집기에 들어감.
Key-1.pem 파일에 있던 암호화된 내용을 죄다 ctrl+A로 붙여넣음.
 
[ec2-user@ip-172-31-2-61 ~]$ chmod 400 Key-1.pem  로 권한을 바꾼다

프라이빗서버의 프라이빗ipv4를 떠온다
[ec2-user@ip-172-31-2-61 ~]$ ssh -i Key-1.pem ec2-user@172.31.41.2 를 입력하면 비둘기등장
[ec2-user@ip-172-31-41-2 ~]$ ping 8.8.8.8 를 하면 외부통신이 안되므로(NAT생성이전) 통신안됨. 물론 sudo yum install 명령어도 안된다.

#Session Manager 복&실습 >>결국 실패
프라이빗 서버는 ec2인스턴스연결을 할 수 없다.(퍼블릭ipv4주소가 없기때문이다.)
IAM 관리자에서 우선 역할부여를 해야한다.
액세스관리>역할>역할만들기 >aws서비스>사용사례 ec2> AmazonEC2RoleforSSM를 찾아서 체크후 다음 역할이름을 my-role-ssm-1 로설정

다음으로 프라이빗서버2를 체크하고 역할부여를 해준다.(보안>IAM역할 수정) 
my-role-ssm-1 를 선택하고 역할 업데이트를 해준다.
역할부여후 세션관리자에 나타나기까지는 시간이 좀 소요된다고 한다.

>>안돼서 결국 vpc엔드포인트 설정하고 엔드포인트 사용해서 연결하면 된다.
외부로 핑이 안될텐데, 이때는 라우팅테이블로 가서 해당 라우팅 규칙에 모든트래픽 0.0.0.0/0 대상: nat게이트웨이 를 추가해주면 핑이 된다.
https://www.youtube.com/watch?v=rewWxRDMgjo 에 따르면, 
vpc endpoint가 해당vpc에 있을 것과 다음을 충족해야한다고 말하고 있다.
-정책은 ssm, ssmmessages,ec2messages,logs,s3/ 보안그룹에서 443포트가 열려있을것(https)

#피어링 복&실습    (참조: github_6주차 주간메모 복기)
my-1-vpc
my-2-vpc  피어링을 위해서는 최소한 두개의  vpc를 만들어놔야한다. (자동생성 해보기)

이름태그 자동생성에 my-1 , my-2로 생성하면 뒤에 알아서 딸려온다.
가용영역(AZ): 3개
세브넷 수: 퍼블릭3개, 프라이빗3개  _ 서브넷CIDR블록 사용자 지정도 할수 있다.
	이부분을 /24로 설정한다.
NAT게이트웨이: 1개의 AZ에서를 선택해본다. 엔드포인트도 설정.
위 과정을 두번 반복한다( my-1,my-2 vpc 워크플로 생성)

-피어링 연결 생성
my-server-1  이라는 이름 생성
요청자는 my-1-vpc
수락자는 my-2-vpc를 생성한다. 
중첩되는 CIDR이 있는 2개의 VPC 사이에서 피어링 연결을 생성할 수 없습니다. 별도의 CIDR이 있는 VPC 2개를 선택하십시오. 라는 오류가 떴다. 확인해보니 
10.0.0.0/16 CIDR이 중복되었으므로 오류가 뜬것이다. 그렇다면 vpc2로 넘어가준다>추가해도안됨 결국 vpc2를 삭제해야된다.

***정리***
1. VPC 등 을선택하면 자동으로 생성해주는 패키징이 있다.
이름태그 자동생성 : net-a 등으로 설정하면 vpc부터 net-a-vpc 로 자동생성된다.
가용영역(AZ)수 : 사용자 지정에서 2b를 빼고 2a,2c로 설정
서브넷 수 2/2개로 설정후 비트수를 20에서 24로 설정해준다.
엔드포인트는 설정해도되나 없는것으로 하자.
(NAT게이트웨이, 엔드포인트는 비용이 들기때문에 선택적으로 생성하거나 설정하지 않는것을 선택하자)
dns옵션에서 호스트이름 활성화, 확인 활성화 체크되어있는지 확인.

2. 두번째 VPC 를 생성해본다.
중요***: net-b로 설정하고 CIDR를 앞에 10.0.0.0/16과 다르게 10.1.0.0/16으로 설정한다.
가용영역(AZ)수 : 사용자 지정에서 2b를 빼고 2a,2c로 설정
서브넷 수 2/2개로 설정후 비트수를 20에서 24로 설정해준다.
나머지 동일.

3. 피어링 연결 생성 _ 293Page.
이름은 뭐 아무렇게나 만들고
피어링할 로컬 VPC(요청자) - net-a-vpc
피어링할 다른 vpc 선택 : 계정/리전을 선택한후
VPC(수락자) - net-b-vpc 를 선택.
성공적으로 진행해서, 피어링연결을 누르면 요청수락/거절 메뉴가 뜬다. 요청을 수락하자.
**주의 : 해당 실습 후 제거를 잘해야 한다. 자동생성이기 때문에 관련 유료서비스를 꼼꼼히 삭제해야함

#############################################################################################

7주차_목요일 메모 _23.10.05 (AWS 자습)
aws 액세스키는 터미널에서 aws 액세스를 가능하게 한다. sdk는 aws소프트웨어 개발자킷이다.
Access key ID ~ = 유저이름
Secret Access Key~ = 패스워드
#1. AWS CLI = 상호작용할 수 있게 도와주는 명령도구 (aws s3 cp 로 시작하는 shell)
Command Line Interface 의 약자이며 파워쉘등에서 명령어로 쓸 수 있다.
1. aws s3 ls
현재 계정의 S3 버킷 목록을 보여주는 명령어.
2. aws s3 sync s3://<버킷이름> <디렉터리>
다음과 같이 s3에 있는 potato-image 라는 버킷에 있는 파일들을 가져올 수 있다.
3. aws s3 cp <파일명> s3://<버킷이름>
반대로 현재 디렉터리에 있는 파일을 S3에 cli명령어를 통해서 업로드 시켜보자
다음과 같이 명령어를 입력하면,,, 버킷 폴더에 파일이 업로드 된 것을 확인할 수 있다.
AWS 콘솔에 직접 접속하지 않아도 작업이 가능하다. (오픈소스다)

windows에서 CLI를 실습해본다> msi 인스톨러로 설치한뒤 cmd에서 확인하면 된다.
aws--version 입력. 버전이 잘 뜨면 성공이다.
>CLI를 통해 Access Key를 만들어본다
유저네임을 클릭> security credentials로 이동 >액세스키 생성> 여러 선택지가 있는데, cli의 경우 cloudshell을 통해 설치해도 된다.
aws configure 명령어를 사용해서 나머지를 아마존에서 복사붙여넣는다.
리전까지 설정하면 aws iam list-users를 입력하면 json파일처럼 정리된다.

>아시아 태평양(서울)리전에서 cloudshell이 작동된다.
[cloudshell-user@ip-10-4-47-83 ~]$ aws --version		입력시
aws-cli/2.13.21 Python/3.11.5 Linux/5.10.192-182.736.amzn2.x86_64 exec-env/CloudShell exe/x86_64.amzn.2 prompt/off
버전이 잘뜬다.
[cloudshell-user@ip-10-4-47-83 ~]$ aws iam list-users		입력시 
{
    "Users": [
        {
            "Path": "/",
            "UserName": "admin01",
            "UserId": "AIDA6H7CZNICFETD5RWKF",
            "Arn": "arn:aws:iam::979191294468:user/admin01",
            "CreateDate": "2023-09-18T07:19:46+00:00",
            "PasswordLastUsed": "2023-09-18T07:33:11+00:00"
        }
    ]
}				루트계정을 제외한 유저가 등장한다.
[cloudshell-user@ip-10-4-47-83 ~]$ echo "test" > demo.txt
[cloudshell-user@ip-10-4-47-83 ~]$ cat demo.txt
test
[cloudshell-user@ip-10-4-47-83 ~]$ rm -rvf demo.txt
removed ‘demo.txt’
터미널창처럼 똑같이 동작하는것을 볼 수 있다.

IAM Roles는 인스턴스를 위한 정책을 설정하는 단계이다.
역할을 부여하면 해당 정책(역할)과 인스턴스를 하나의 객체로 묶는다.

#############################################################################################

7주차_금요일(AWS) 
ec2 ?? ap-2c 인스턴스 공인ip(x)
1.ssm 통한 접속
2 ec2 시작, aim to
3.vpc- 엔드포인트생성
=====

#세션매니저 3차시도 (성공)
>인스턴스 생성
private-server-1
서브넷 2c, 퍼블릭 비활성화 하고 만들어둔다
>역할생성(SSM)
AmazonEC2RoleforSSM	AWS 관리형	권한 정책
AmazonSSMManagedInstanceCore	AWS 관리형	권한 정책  을 추가해서 만듦
>인스턴스로 가서 역할 업데이트
172.31.34.80 (프라이빗 ip주소) 를 기억. 
>인스턴스 연결로 들어가서 '엔드포인트를 사용하여 연결'
ec2인스턴스 연결 엔드포인트 선택쪽에 없다면 '생성하기'버튼이 있으므로 바로가기.
>엔드포인트 설정 
private-ssm-edp-1 라는 이름으로 설정

1. 'ec2인스턴스 연결 엔드포인트(신규기술)' 를 선택하고 vpc는 default 설정, 서브넷은 아까 했던 2c, 보안그룹도 아까 했던설정 그대로.
or 
2. AWS서비스에서 ssm,ssmmessages,ec2 messages를 각각 엔드포인트를 만들어주어야 한다. 
(총3개) 

1번 방법으로 하면 ec2인스턴스연결(엔드포인트사용) 으로 바로 연결이 가능하다
비둘기 바로뜬다. 이방법으로 내부 인스턴스(private)를 생성한뒤 프라이빗ip로 핑을 날리면 바로된다.

2번 방법(정석)으로하면 (SSM,SSMmessages,ec2messages) 인스턴스 SSM으로 연결하면 
sh-5.2$ 로 뜨며 연결이 되었다. 이방법으로도 프라이빗ip로 핑을 날리면 바로 된다.

>1,2번 방법을 병행하는 것은 되나, 2번의 세개의 엔드포인트 삭제 뒤 세션접속에는 오류가 있는것으로 보인다. 해당 기술은 말그대로 SSM연결은 2번방법만 해당되는 것으로 알 수 있다.

#EC2 유데미 자습
AWS 예산설정> Elastic Computer Cloud 
연관된 서비스는 ec2(인스턴스), ebs(볼륨스토리지), elb(로드밸런서), asg(오토스켈링)가 있다 
-부트스트랩 : 인스턴스 시작시에 명령하는 것을 말하며, sudo 명령어를 써야 함.
>인스턴스 생성은 다 같은데, 맨 아래 user data칸에 스크립트를 넣으면 
부트스트래핑으로 그대로 출력한다. #!/bin/bash

범용의 인스턴스 (M): 는 웹서버나 코드 저장소(리포지토리)에 적합하다.	컴퓨팅,메모리,네트워킹 균형도 잘 맞다.
컴퓨터 최적화 인스턴스 (C): 컴퓨터 최적화의 인스턴스는 C가 포함되며, 컴퓨터 집약적인 성격을 가진다. 고사양이고 고성능을 가진다. 
메모리 최적화 인스턴스 (R) : 고성능의 관계형 또는 비관계형 데이터베이스, 일래스틱 캐시 등에 생성. 실시간 처리를 위한 애플리케이션에 사용
스토리지 최적화 인스턴스 ( ) : 로컬스토리지에서 대규모 데이터셋에 액세스할때 적합하다. OLTP , NoSQL데이터 베이스 ,Redis 분산파일 등에 쓰인다.
>보안그룹  
인스턴스에 지나다니는 트래픽을 관리한다. 인바운드나 아웃바운드 규칙을 설정할 수 있다.
또한 포트를 추가 및 제거 할 수 있다( 방화벽을 통해 ) 
 
-ssh 명령어로는 원격접속을 가능한데 예로 ssh -i All-Machine-Key.pem ec2-user@172.25.3.11 등이 가능하다. 뒤의 아이피는 퍼블릭아이피에 해당함. /window 10미만에서는 Putty를 이용해 접속해 볼 수 있다. 단 window10이상, Mac, Linux부터는 불가하니 참고.
-default 보안그룹에서는 ec2의 인스턴스 연결에 있어서 ssh가 막혀있기 때문에, port 22(ssh)를 모든곳에서 열어줘야한다. 


