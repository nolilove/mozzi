19주차 월요일 메모( Docker - Harbor )

이번시간부터는 지난주 도커에 이어서 Harbor
사용하는법을 배워보도록 한다.

Dockerfile 명령어/지시어 정리
https://docs.docker.com/engine/reference/builder/

Docker Container Image 생성 방법
 - 명령어를 통한 이미지 생성
   - docker container commit
 - Dockerfile을 통한 이미지 생성

Dockerfile
  - Docker Container Image 생성을 위한 코드 형태의 정의 파일

도커 복기 
Docker Container Image 빌드 명령어
$ docker image build  -t IMAGE_REPO:TAG  BUILD_PATH
$ docker build  -t IMAGE_REPO:TAG  BUILD_PATH

Dockerfile을 통한 Docker Container Image 빌드 방법
1. Image 빌드를 위한 작업 디렉터리 생성 및 해당 디렉터리로 이동
   $ mkdir DIR
   $ cd DIR
2. Dockerfile 작성
   $ vim Dockerfile
3. 이미지 빌드 명령어 실행
   $ docker image build -t IMAGE_REPO:TAG  .



# Harbor를 이용한 Container Private Registry 구축
 

Linux에서 Docker-Compose 설치(docker-compose v2)

https://docs.docker.com/compose/
https://github.com/docker/compose
ㅏ하버를 사용해서 설치하려고 한다. 
https://goharbor.io/docs/2.10.0/install-config/

https://github.com/goharbor/harbor/releases/download/v2.10.0/harbor-offline-installer-v2.10.0.tgz
http://192.168.10.5/pub/docker/harbor%2doffline%2dinstaller%2dv2.10.0.tgz

#설치 진행단계
wget https://github.com/goharbor/harbor/releases/download/v2.10.0/harbor-offline-installer-v2.10.0.tgz
 
wget으로 다운로드 받았으면, 압축파일을 풀어준다.
[user@dockerhost ~]$ tar zxvf harbor-offline-installer-v2.10.0.tgz 
harbor/harbor.v2.10.0.tar.gz
harbor/prepare
harbor/LICENSE
harbor/install.sh
harbor/common.sh
harbor/harbor.yml.tmpl

harbor라는 디렉터리로 이동
[user@dockerhost ~]$ cd harbor/
[user@dockerhost harbor]$ ll
total 631180
-rw-r--r--. 1 user user      3643 Dec 14 15:39 common.sh
-rw-r--r--. 1 user user 646285764 Dec 14 15:39 harbor.v2.10.0.tar.gz
-rw-r--r--. 1 user user     13761 Dec 14 15:39 harbor.yml.tmpl
-rwxr-xr-x. 1 user user      1975 Dec 14 15:39 install.sh
-rw-r--r--. 1 user user     11347 Dec 14 15:39 LICENSE
-rwxr-xr-x. 1 user user      1882 Dec 14 15:39 prepare

복사를 해준다.
[user@dockerhost harbor]$ cp harbor.yml.tmpl harbor.yml
그리고 편집기로 연다. (set nu로 번호 확인)
[user@dockerhost harbor]$ vim harbor.yml
 
-https는 주석처리를 해주자 (안쓸것)
  5 hostname: harbor.example.com
  7 # http related config
  8 http:
  9   # port for http, default is 80. If https enabled, this port will redirect to https     port
 10   port: 80
 11 
 12 # https related config
 13 ##https:
 14   # https port for harbor, default is 443
 15   ##port: 443
 16   # The path of cert and key files for nginx
 17   ##certificate: /your/certificate/path
 18   ##private_key: /your/private/key/path

 * HTTP 구성을 위해 주석 처리

$ sudo vim /etc/hosts
192.168.56.116    harbor.example.com


 
Docker Daemon은 기본적으로 HTTPS로 Container Registry(Docker Hub 등)와 통신한다.
HTTP 기반으로 Private Registry를 이용하기 위해 insecure-registries 항목을 설정해야 함.
$ sudo vim /etc/docker/daemon.json
{
  "insecure-registries": ["DOCKER_HOST_IP", "harbor.example.com"]
}
 
192.168.56.116
다되었으면 서비스를 재시작하자.
[user@dockerhost harbor]$ sudo systemctl restart docker.service

[user@dockerhost harbor]$ ll
total 631196
-rw-r--r--. 1 user user      3643 Dec 14 15:39 common.sh
-rw-r--r--. 1 user user 646285764 Dec 14 15:39 harbor.v2.10.0.tar.gz
-rw-r--r--. 1 user user     13777 Dec 26 10:39 harbor.yml
-rw-r--r--. 1 user user     13761 Dec 14 15:39 harbor.yml.tmpl
-rwxr-xr-x. 1 user user      1975 Dec 14 15:39 install.sh
-rw-r--r--. 1 user user     11347 Dec 14 15:39 LICENSE
-rwxr-xr-x. 1 user user      1882 Dec 14 15:39 prepare

install.sh이 도커 컴포즈와 같이 연동; 
sudo curl -SL https://github.com/docker/compose/releases/download/v2.23.3/docker-compose-linux-x86_64 -o /usr/local/bin/docker-compose
[user@dockerhost harbor]$ sudo curl -SL https://github.com/docker/compose/releases/download/v2.23.3/docker-compose-linux-x86_64 -o /usr/local/bin/docker-compose
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0
100 56.9M  100 56.9M    0     0  40.0M      0  0:00:01  0:00:01 --:--:-- 55.6M

모든사용자에게 실행권한을 부여.
[user@dockerhost harbor]$ sudo chmod a+x /usr/local/bin/docker-compose
[user@dockerhost harbor]$ sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
조회해보자
[user@dockerhost harbor]$ ls -l /usr/bin/docker-compose 
lrwxrwxrwx. 1 root root 29 Dec 26 10:56 /usr/bin/docker-compose -> /usr/local/bin/docker-compose
[user@dockerhost harbor]$ docker compose version
Docker Compose version v2.21.0

이제 설치를 해본다.
 
[user@dockerhost harbor]$ sudo ./install.sh 
[Step 0]: checking if docker is installed ...

Note: docker version: 24.0.7

[Step 1]: checking docker-compose is installed ...

Note: Docker Compose version v2.21.0

[Step 2]: loading Harbor images ...
 

[user@dockerhost harbor]$ ls
common     docker-compose.yml     harbor.yml       install.sh  prepare
common.sh  harbor.v2.10.0.tar.gz  harbor.yml.tmpl  LICENSE

백그라운드로 실행한다
[user@dockerhost harbor]$ sudo docker-compose up -d 
[+] Running 9/7
✔ Container harbor-log         Running                                                                          0.0s
✔ Container redis              Running                                                                          0.0s
✔ Container registry           Started                                                                          0.0s
✔ Container registryctl        Running                                                                          0.0s
✔ Container harbor-db          Running                                                                          0.0s
✔ Container harbor-core        Started                                                                          0.0s
✔ Container harbor-portal      Running                                                                          0.0s
✔ Container nginx              Started                                                                          0.0s
✔ Container harbor-jobservice  Started

이제 드디어 로그인해보자. 
[user@dockerhost harbor]$ docker login harbor.example.com
Username: admin
Password: Harbor12345
WARNING! Your password will be stored unencrypted in /home/user/.docker/config.json.
Configure a credential helper to remove this warning. See
https://docs.docker.com/engine/reference/commandline/login/#credentials-store

Login Succeeded
>>서비스 올라간것을 확인해본다. 웹에서도 확인해볼 수 있는데
웹에서 harbor.example.com으로 가서 username, passwd를 입력해주면 다음과같은 창이 뜬다.
 

[user@dockerhost harbor]$ docker image tag busybox:latest harbor.example.com/library/busybox:latest
[user@dockerhost harbor]$ docker image push harbor.example.com/library/busybox:latest 
The push refers to repository [harbor.example.com/library/busybox]
d19905f4398b: Pushed 
latest: digest: sha256:f586302e9905d5f0cad22b3015c926529923ed9c7315860954767038645f927f size: 527

실습후 정리
[user@dockerhost harbor]$ sudo docker-compose down
[sudo] password for user: 
[+] Running 10/10
 ✔ Container registryctl        Removed                                                                          1.1s 
 ✔ Container nginx              Removed                                                                          1.4s 
 ✔ Container harbor-jobservice  Removed                                                                          1.0s 
 ✔ Container harbor-core        Removed                                                                          0.5s 
 ✔ Container harbor-portal      Removed                                                                          0.5s 
 ✔ Container harbor-db          Removed                                                                          0.7s 
 ✔ Container registry           Removed                                                                          0.4s 
 ✔ Container redis              Removed                                                                          0.6s 
 ✔ Container harbor-log         Removed                                                                         10.3s 
 ✔ Network harbor_harbor        Removed
==

#http로 구성을 해봤으니, https 로 구성을 해본다.
아까 다운로드받은것들은 스킵을 하고, 파일 복사부터 해본다. 

[user@dockerhost ~]$ sudo mkdir -p /data/cert
[sudo] password for user:
[user@dockerhost ~]$ cd /data/cert/
[user@dockerhost cert]$ ls

CA 인증서 생성
$ sudo mkdir -p /data/cert/
$ cd /data/cert/

CA 인증서 Private Key 생성
$ sudo openssl genrsa -out ca.key 4096

CA 인증서 crt 파일 생성
 
[user@dockerhost cert]$ sudo openssl req -x509 -nodes -sha512 -days 3650 \
>  -subj "/C=KR/ST=Seoul/L=Gangnam/O=example/OU=infra/CN=harbor.example.com" \
>  -key ca.key\
>  -out ca.crt 

서버 인증서 Private Key 발급받기 
[user@dockerhost cert]$ sudo openssl genrsa -out harbor.example.com.key 4096 

CSR (Certificate Signing Request) 생성하기
 
[user@dockerhost cert]$ sudo openssl req -sha512 -new \
> -subj "/C=KR/ST=SEOUL/L=Gangnam/O=example/OU=infra/CNㄴ=harbor.example.com" \
> -key harbor.example.com.key \
> -out harbor.example.com.csr 

ext파일을 작성해본다. (설명하는 파일)
[user@dockerhost cert]$ sudo vim v3.ext
authorityKeyIdentifier=keyid,issuer
basicConstraints=CA:FALSE
keyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment
extendedKeyUsage = serverAuth
subjectAltName = @alt_names

[alt_names]
DNS.1=harbor.example.com
DNS.2=example
DNS.3=harbor

Harbor 호스트 인증서 생성 (1년짜리 인증서를 발급하기)
 
[user@dockerhost cert]$ sudo openssl x509 -req -sha512 -days 365 \
> -extfile v3.ext \
> -CA ca.crt -CAkey ca.key -CAcreateserial \
> -in harbor.example.com.csr \
> -out harbor.example.com.crt
Certificate request self-signature ok
subject=C = KR, ST = SEOUL, L = Gangnam, O = example, OU = infra, CN = harbor.example.com

Harbor 호스트 인증서 생성
$ sudo openssl x509 -req -sha512 -days 365 \
 -extfile v3.ext \
 -CA ca.crt -CAkey ca.key -CAcreateserial \
 -in harbor.example.com.csr \
 -out harbor.example.com.crt
도커 데몬에 인증서 적용
인증서 파일 변환(crt 파일을 cert 파일로 변환)
$ pwd
/data/cert/

$ sudo openssl x509 -inform PEM -in harbor.example.com.crt -out harbor.example.com.cert


도커 데몬이 관리하는 디렉터리 생성 및 하위 디렉터리로 인증서 복사
$ sudo mkdir -p /etc/docker/certs.d/harbor.example.com/

$ sudo cp harbor.example.com.cert /etc/docker/certs.d/harbor.example.com/
$ sudo cp harbor.example.com.key /etc/docker/certs.d/harbor.example.com/

$ sudo cp ca.crt /etc/docker/certs.d/harbor.example.com/

정리해보자

[user@dockerhost cert]$ pwd
/data/cert
[user@dockerhost cert]$ sudo openssl x509 -inform PEM -in harbor.example.com.crt -out harbor.example.com.cert
[sudo] password for user: 
[user@dockerhost cert]$ ls
ca.crt  ca.srl                   harbor.example.com.crt  harbor.example.com.key
ca.key  harbor.example.com.cert  harbor.example.com.csr  v3.ext

[user@dockerhost cert]$ sudo mkdir -p /etc/docker/certs.d/harbor.example.com/
[user@dockerhost cert]$ 
[user@dockerhost cert]$ sudo cp harbor.example.com.cert /etc/docker/certs.d/harbor.example.com/
[user@dockerhost cert]$ 
[user@dockerhost cert]$ sudo cp harbor.example.com.key /etc/docker/certs.d/harbor.example.com/
[user@dockerhost cert]$ 
[user@dockerhost cert]$ sudo cp ca.crt /etc/docker/certs.d/harbor.example.com/
[user@dockerhost cert]$ ls -l /etc/docker/certs.d/harbor.example.com/
total 12
-rw-r--r--. 1 root root 2049 Dec 26 12:31 ca.crt
-rw-r--r--. 1 root root 2155 Dec 26 12:30 harbor.example.com.cert
-rw-------. 1 root root 3268 Dec 26 12:30 harbor.example.com.key
>> 여기까지해서 인증서 발급이 완료되었다. 

#실행해본다.
우선 데몬json파일을 tmp로 옮겨본다
[user@dockerhost cert]$ sudo mv /etc/docker/daemon.json /tmp
[user@dockerhost cert]$ cd ~
[user@dockerhost ~]$ cd harbor/
[user@dockerhost harbor]$ pwd
/home/user/harbor
해당 위치로 이동한다음에 작업을 계속한다.
$ vim harbor.yml
 주석쳤던 부분을 다시 해제하고 설정할것이다.
 
...
hostname: harbor.example.com
...
http:
  port: 80
...
https:
  certificate: /data/cert/harbor.example.com.crt
  private_key: /data/cert/harbor.example.com.key
...
harbor_admin_password: Harbor12345
작성하고 저장.

Docker 데몬 서비스 재시작 후, 
[user@dockerhost harbor]$ sudo systemctl restart docker.service
Harbor에 변경된 구성을 적용한다
[user@dockerhost harbor]$ sudo ./prepare 
새로운 설정을 반영하기 위해 Harbor 컨테이너를 재시작한다.
[user@dockerhost harbor]$ sudo docker-compose down -v
[+] Running 10/10
 ✔ Container harbor-jobservice  Removed                                                                          0.5s 
 ✔ Container nginx              Removed                                                                          0.7s 
 ✔ Container registryctl        Removed                                                                          0.4s 
 ✔ Container harbor-portal      Removed                                                                          0.2s 
 ✔ Container harbor-core        Removed                                                                          3.2s 
 ✔ Container harbor-db          Removed                                                                          0.6s 
 ✔ Container registry           Removed                                                                          0.4s 
 ✔ Container redis              Removed                                                                          0.5s 
 ✔ Container harbor-log         Removed                                                                         10.3s 
 ✔ Network harbor_harbor        Removed                                                                          0.3s 
[user@dockerhost harbor]$ sudo docker-compose up -d
[+] Running 10/10
 ✔ Network harbor_harbor        Created                                                                          0.4s 
 ✔ Container harbor-log         Started                                                                          0.1s 
 ✔ Container harbor-portal      Started                                                                          0.2s 
 ✔ Container registryctl        Started                                                                          0.1s 
 ✔ Container redis              Started                                                                          0.1s 
 ✔ Container registry           Started                                                                          0.2s 
 ✔ Container harbor-db          Started                                                                          0.2s 
 ✔ Container harbor-core        Started                                                                          0.0s 
 ✔ Container nginx              Started                                                                          0.1s 
 ✔ Container harbor-jobservice  Started
 


