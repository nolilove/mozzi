16주차 월요일 메모( 앤서블_Import , Role , Vault  //  AWS )

지난주에 제어문, 재사용성을 고려한 플레이북의 작성에 대해서 공부했었다.
Ansible Vault
- Ansible에서 민감 데이터를 암호화 하기 위한 도구(AES 암호화 지원)

작업 에러 처리
Ansible에서 에러를 판단하는 기준
  - 모듈의 실행이 실패(failed)한 경우
  - command, shell 모듈 등으로 명령어 실행시 Exit Code(Return Code)가 0이 아닌 값을 반환하는 경우
ignore_errors (bool)
  - 실행된 작업에서 에러 발생시 에러를 무시 (true/false)
force_handlers (bool)
  - 핸들러를 강제로 실행(true/false)
failed_when
  - 작업이 실패하는 조건을 사용자 정의하는 구문

# IMPORT 구문을 사용하는 플레이북
[user@ansible-control ~]$ mkdir work/20231204
[user@ansible-control ~]$ cd work/20231204
[user@ansible-control 20231204]$ cp ../20231130/inventory .
[user@ansible-control 20231204]$ cp ../20231130/ansible.cfg .

[user@ansible-control 20231204]$ vim playbook-import_tasks1.yaml
---
- name: playbook import_tasks 1
  hosts: all
  become: true

  tasks:
  - name: task1 - collect a file /etc/motd
    fetch:
      src: /etc/motd
      dest: /home/user/collect_motd_dir/
  - name: import_tasks
    import_tasks: tasks/import_tasks1.yaml
  - name: task2 - deploy a file /etc/motd
    copy:
      content: "welcome to ansible nodes"
      dest: /etc/motd
...
이후 태스크 폴더를 생성
[user@ansible-control 20231204]$ mkdir tasks
[user@ansible-control 20231204]$ vim import_tasks1.yaml
- name: "__import_task1"
  debug:
    msg: "import_task1-{{ item }} is running..."
  loop:
  - 1
  - 2
  - 3
앤서블 플레이북을 실행해본다.
[user@ansible-control 20231204]$ mv import_tasks1.yaml  tasks/
[user@ansible-control 20231204]$ ansible-playbook playbook-import_task1.yaml 
TASK [task1 - collect a file /etc/motd] ********************************************
fatal: [ansible-node03]: FAILED! => {"changed": false, "msg": "the remote file does not exist, not transferring, ignored"}
changed: [ansible-node02]
changed: [ansible-node01]
>node03에는 파일이 존재하지 않는다고한다 (/etc/motd에)
 
다른 노드들에서는 잘돌아갔다..

#roles 구문 이용하기 
Ansible Role
 - Ansible Play를 실행하는데 필요한 여러 파일을 하나의 구조화 된 패키지로 묶어 배포하는 단위
 - IDE 개발 도구에서 프로그램 개발시 생성하는 프로젝트 개념과 유사함.
$ ansible-galaxy role 로 관리함.

#실습
[user@ansible-control 20231204]$ mkdir roles
[user@ansible-control 20231204]$ ansible-galaxy role init --init-path roles test-role
- Role test-role was created successfully
 
이런 구조에서 각각 필요한곳의 yml에 작성해주면 된다.

[user@ansible-control 20231204]$ vim roles/test-role/tasks/main.yml
메인 yml에 마리아db 데이터베이스를 이용하는 태스크를 작성해본다.
---
# tasks file for test-role
- name: Install mariadb-server
  dnf:
    name: mariadb-server
    state: latest
- name: start mariadb-server
  systemd:
    name: mariadb
    state: started
- name:  start permanently mariadb service
  systemd:
    name: mariadb
    enabled: true
- name: allow mariadb service permanently
  firewalld:
    service: mysql
    state: enabled
    permanent: true
... 
여기에 대한 플레이북도 작성한다.
[user@ansible-control 20231204]$ vim playbook-test-role1.yaml
---
- name: playbook using test-role 1
  hosts: rocky
  become: true
  roles:
  - role: test-role
  tasks:
  - name: playbook task
    debug:
      msg: "playbook task"
...
실행해본다. 
[user@ansible-control 20231204]$ ansible-playbook playbook-test-role1.yaml ^C
TASK [playbook task] ***********************************************************
ok: [ansible-node01] => {
    "msg": "playbook task"
}
ok: [ansible-node02] => {
    "msg": "playbook task"
}
잘 설치됐다. 설치됐는지 확인도 해본다.
노드01로 이동해서, 
[user@ansible-node01 ~]$ sudo -i
[sudo] password for user: 
[root@ansible-node01 ~]# mariadb를 하면 잘 실행된다. 
MariaDB [(none)]> show databases;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| mysql              |
| performance_schema |
+--------------------+
[user@ansible-control 20231204]$ vim roles/test-role/tasks/main.yml
---
# tasks file for test-role
- name: print var1 value
  debug:
    msg: "var1 = {{ var1 }}"
- name: Install mariadb-server
  dnf:
    name: mariadb-server
    state: latest
- name: start mariadb-server
  systemd:
    name: mariadb
    state: started
- name:  start permanently mariadb service
  systemd:
    name: mariadb
    enabled: true
- name: allow mariadb service permanently
  firewalld:
    service: mysql
    state: enabled
    permanent: true
...
위의 저부분을 추가한다.
그리고 vars에 추가해준다
[user@ansible-control 20231204]$ vim roles/test-role/vars/main.yml
---
# vars file for test-role
var1: 1234
var2: 5678            
플레이북도 살짝 바꿔본다
 
[user@ansible-control 20231204]$ vim playbook-test-role1.yaml
---
- name: playbook using test-role 1
  hosts: rocky
  become: true
  roles:
  - role: test-role
    var1: " hellow Ansible Role"
  tasks:
  - name: playbook task
    debug:
      msg: "playbook task"
...
실행을 해본다.
[user@ansible-control 20231204]$ ansible-playbook playbook-test-role1.yaml
TASK [test-role : print var1 value] ********************************************
ok: [ansible-node01] => {
    "msg": "var1 =  hellow Ansible Role"
}
ok: [ansible-node02] => {
    "msg": "var1 =  hellow Ansible Role"
}


# Ansible Vault 81.p (파일수준/ 데이터수준)
- Ansible에서 민감 데이터를 암호화 하기 위한 도구(AES 암호화 지원)
- Ansible Vault는 기본적으로 단일 Vault Password를 지원하며 필요시 Vault ID를 사용하여 복수의 Vault Password를 사용할 수 있음.

암호화할 수 있는 대상
 - 파일 수준 암호화
  - 플레이북 전체
  - 작업 파일 전체
  - 변수 파일 전체

 - 가변 수준 암호화 (변수값 정도의 암호화 )
  - 변수 값 : Playbook에  !vault 로 시작하는 포함된 값

Ansible Vault Password
 - 단일 Password : 1개의 패스워드로 암호화
 - 복수 Password : 각 데이터 별 다른 패스워드로 암호화
   - Ansible Vault ID  :  각 Vault 패스워드를 구분하기 위한 식별자

$ ansible-vault  SUBCOMMAND 

#실습- Vault로 새 암호화된 파일 생성 (파일 수준)
[user@ansible-control 20231204]$ ansible-vault create secret.txt
New Vault password: test
Confirm New Vault password: test
=====
Hello Ansible Vault
=====
저장. 
[user@ansible-control 20231204]$ cat secret.txt 을 하게되면 암호화되어서 나온다.
$ANSIBLE_VAULT;1.1;AES256
30376234323032316436643630613065376230313762663963633139663966316237643536376431
3131366165383436653538306164366664643061616437370a626566666630303766393236313739
37313837636262343165386235656464663065613832383438613337343734393732356330343930
3866356130303636320a383236383839313630343938623566636638646665363135636433666533
64363738366366616330303133303934376564386361653836376662626635333137

[user@ansible-control 20231204]$ vim secret2.txt
=====
by my finals
=====

[user@ansible-control 20231204]$ ansible-vault encrypt secret2.txt 
New Vault password: user
Confirm New Vault password: user 
Encryption successful
[user@ansible-control 20231204]$ cat secret2.txt 
$ANSIBLE_VAULT;1.1;AES256
34353666333264383062373337643937393964373139333538653061326561666437363361323531
6364393766636663663333663339323761663237333134650a656166643430616239656636333236
33393031643138393264363531336366613839373932356636323035643332643538356432316566
3461396464323162360a636462613936306333363736366430623530373762323836393331323136
3233
>> 둘다 암호화가 잘 됐다.
# Ansible Vault로 기존 파일 암호화
[user@ansible-control 20231204]$ vim secret2.txt
Hello Ansible Vault
[user@ansible-control 20231204]$ ansible-vault encrypt secret2.txt
New Vault password:
Confirm New Vault password:
Encryption successful

Ansible Vault로 암호화 된 파일 내용 확인
[user@ansible-control 20231204]$ ansible-vault view secret2.txt
Vault password:
Hello Ansible Vault

Ansible Vault로 암호화 된 파일 내용 편집
[user@ansible-control 20231204]$ ansible-vault edit secret2.txt
Vault password:
Hello Ansible Vault

Ansible Vault로 암호화된 파일 복호화
[user@ansible-control 20231204]$ ansible-vault decrypt secret2.txt 
Vault password: 
Decryption successful
이러면 암호화가 풀려서 그냥 보기로도 내용을 볼 수 있다.
[user@ansible-control 20231204]$ cat secret2.txt 
bye my finals

Vault의 패스워드를 재설정하고싶을때 
[user@ansible-control 20231204]$ ansible-vault rekey secret.txt 
Vault password:  test
New Vault password:  user
Confirm New Vault password: user 
Rekey successful
[user@ansible-control 20231204]$ ansible-vault view secret.txt 
Vault password: 
ERROR! Decryption failed (no vault secrets were found that could decrypt) on secret.txt for secret.txt
[user@ansible-control 20231204]$ ansible-vault view secret.txt 
Vault password: 
Hellow Ansible Vault ~ 
>>이전 패스워드는 안되고 새로운 패스워드가 가능하도록 바뀌었다.
#


[user@ansible-control 20231204]$ ansible-vault encrypt_string secret.txt
New Vault password: 
Confirm New Vault password: 
Encryption successful
!vault |
          $ANSIBLE_VAULT;1.1;AES256
          36393662663330336439626232373966646563663335663562616465616164303233623363323961
          3234316361323731653433306630306430663964643030640a383063383138356262303163303031
          37393733636536656339613964313532313037666335376434396632616363613535386261313334
          3338366335323230380a626461313939613632363064323232653533306338636632373263613337

볼트 패스워드파일 만들기
[user@ansible-control 20231204]$ vim vault-pass
test1234
-rw-r--r--. 1 user user   9 Dec  4 11:00 vault-pass
[user@ansible-control 20231204]$ chmod 400 vault-pass 
-r--------. 1 user user   9 Dec  4 11:00 vault-pass

볼트 패스워드파일에 저장된 내용으로 접근하기
[user@ansible-control 20231204]$ ansible-vault view secret.txt --vault-password-file vault-pass
Hello Ansible Vault
[user@ansible-control 20231204]$ ansible-vault view secret.txt --vault-pass-file vault-pass
Hello Ansible Vault

#Ansible Vault를 활용한 Ansible Playbook 실행 실습
Playbook 전체를 암호화 하여 Ansible Playbook 실행
---
- name: Playbook create user 1 encrypted 1(Playbook)
  hosts: all
  become: true
  vars:
    username: user02
    password: test1234

  tasks:
  - name: Create a user {{ username }}
    user:
      name: "{{ username }}"
      state: present
      password: "{{ password | password_hash('sha512') }}"
  - name: Print hashed password
    debug:
      msg: "{{ password | password_hash('sha512') }}"
...
 Ansible Playbook 암호화
[user@ansible-control 20231204]$ ansible-vault encrypt playbook-create_user1_encrypted1.yaml
New Vault password: user
Confirm New Vault password: 
Encryption successful
실행해보면
[user@ansible-control 20231204]$ ansible-playbook playbook-create_user1_encrypted1.yaml 
ERROR! Attempting to decrypt but no vault secrets found
실행자체가 암호화되어 안된다.이때는 외부파일을 암호화하여 playbook을 실행한다.
[user@ansible-control 20231204]$ ansible-playbook playbook-create_user1_encrypted1.yaml --ask-vault-pass
 
암호를 입력하면 플레이북이 잘 실행된것을 알 수 있다.

# Ansible Playbook 외부 파일을 암호화 하여 Ansible Playbook 실행
[user@ansible-control 20231204]$ vim playbook-create_user1_encrypted2.yaml 
---
- name: Playbook create user 1 encrypted 2(vars_files)
  hosts: all
  become: true
  vars_files:
  - vars/vars1.yaml

  tasks:
  - name: Create a user {{ username }}
    user:
      name: "{{ username }}"
      state: present
      password: "{{ password | password_hash('sha512') }}"
  - name: Print hashed password
    debug:
      msg: "{{ password | password_hash('sha512') }}"
...
을 수정하고
[user@ansible-control 20231204]$ mkdir vars
[user@ansible-control 20231204]$ vim vars/vars1.yaml
[user@ansible-control 20231204]$ cat vars/vars1.yaml 
username: user02
password: test1234

[user@ansible-control 20231204]$ ansible-vault encrypt vars/vars1.yaml --vault-pass-file vault-pass
Encryption successful
[user@ansible-control 20231204]$ ansible-playbook playbook-create_user1_encrypted2.yaml --vault-pass-file vault-pass
>>잘 실행되었다.

# Ansible Playbook 일부 데이터를 암호화 하여 Ansible Playbook 실행
[user@ansible-control 20231204]$ vim playbook-create_user1_encrypted3.yaml

다른창에서 먼저 작성
[user@ansible-control 20231204]$ ansible-vault encrypt_string "test1234" --name password 
New Vault password: newpass
Confirm New Vault password: newpass
password: !vault |
          $ANSIBLE_VAULT;1.1;AES256
          61653033623037353063393761356530613636376366356631643633643533363331373762313566
          3138633838623437343864313066353131323738303930620a326262633434353835313932666430
          65636537656330616631303766373139303966316539383233326635366439323434656638646266
          3131623665383233300a646338643864363262636166616661656263663731373863373031343236
이 암호화한 데이터를 복사해서 넣어주자
 들여쓰기 레벨에 맞게 잘 붙여넣어준다. 그리고 저장. 
---
- name: Playbook create user 1 encrypted 1(Playbook)
  hosts: all
  become: true
  vars:
    username: user02
    password: !vault |
          $ANSIBLE_VAULT;1.1;AES256
          61653033623037353063393761356530613636376366356631643633643533363331373762313566
          3138633838623437343864313066353131323738303930620a326262633434353835313932666430
          65636537656330616631303766373139303966316539383233326635366439323434656638646266
          3131623665383233300a646338643864363262636166616661656263663731373863373031343236


  tasks:
  - name: Create a user {{ username }}
    user:
      name: "{{ username }}"
      state: present
      password: "{{ password | password_hash(&apos;sha512&apos;) }}"
  - name: Print hashed password
    debug:
      msg: "{{ password | password_hash(&apos;sha512&apos;) }}"
...
이제 플레이북을 실행해보면
[user@ansible-control 20231204]$ ansible-playbook playbook-create_user1_encrypted3.yaml  --vault-pass-file vault-pass
>>오류가 난다.
fatal: [ansible-node03]: FAILED! => {"msg": "Unexpected templating type error occurred on ({{ password | password_hash('sha512') }}): crypt() argument 1 must be str, not AnsibleVaultEncryptedUnicode. crypt() argument 1 must be str, not AnsibleVaultEncryptedUnicode"}

[user@ansible-control ~]$  ansible-vault encrypt_string '$6$TJSTtmCW6tUUENrD$F4w6dpXTC/koUH7/Z11bemWnxcYG3YQZZkgSFo9w8K6U0seF33gBK9btucQLgXTy3OSKnxN5Ua5rTLFFlFrRr.' --name password --vault-pass-file vault-pass
다시 저부분을 수정해서 하면 잘 된다.

>>볼트는 민감한데이터를 다룰때에 사용하는 도구이며, 데이터들이 파일이 아무렇게나 방치되면 유출될 수 있는 가능성이 있기에 플레이북을 작성해서 활용하는 것을 좋으나 passwd같은 하드코딩된 정보들이 그대로 들어가면 보안적으로 좋지 않으므로 암호화하는 도구라고 생각하자.

# AWS 아마존 웹 서비스 파트로 넘어간다.

