6주차_월요일 메모( Git )

개요
git , 그리고 Github는 버전관리에 용이한 프로그램 및 도구이다.
warning: in the working copy of 'abc3.txt', LF will be replaced by CRLF the next time Git touches it 		메세지의 해결
git config --global core.autocrlf true // 시스템 전체에 적용
git config core.autocrlf true // 해당 프로젝트에만 적용

#깃과 버전 관리
버전 관리 시스템은 파일 변화를 시간에 따라
기록했다가 나중에특정 시점의 버전을 다시 꺼내올 수 있는 시스템이다. 이 책에서는 버전 관리하는 예제로 소프트웨어 소스 코드만 보여주지만, 실제로 거의 모든 컴퓨터 파일의 버전을 관리할 수 있다. 그래픽 디자이너나 웹 디자이너도 버전 관리 시스템(VCS - Version Control System)을 사용할 수 있다.
VCS로 이미지나 레이아웃의 버전(변경 이력 혹은 수정 내용)을 관리하는 것은 매우 현명하다.
어떤 직종에 있던 간에, 문서관리에 있어서는 GIt 시스템이 굉장히 유용한 도구이기 때문이다. 또한 시스템 환경에서는 협업의 형태로도 유용하게 쓰인다.

#git 설치후
CMD로 들어가서 cd  \ 로 최상위로 나온다.
마이크로소프트는 dir 이 ll -al같은기능
cd git_test > ll -al (ls -al)
***doskey ls = dir 			doskey=alias 같은 기능!!
***doskey clear = cls 

$ echo $PS1	를 치면
\[\033]0;$TITLEPREFIX:$PWD\007\]\n\[\033[32m\]\u@\h \[\033[35m\]$MSYSTEM \[\033[33m\]\w\[\033[36m\]`__git_ps1`\[\033[0m\]\n$
새로운 폴더에 갔으면 pwd를 치는 습관을 들이자.
cd -는 이전 폴더로 돌아가는 배쉬 쉘의 특성이 있다.

$ cd /c/git_test

#환경변수설정
$ git config --global user.		
USER@KDP-SOLDESK1-02 MINGW64 /c/git_test (master)
$ git config --global user.name "Lee"
USER@KDP-SOLDESK1-02 MINGW64 /c/git_test (master)
$ git config --global user.email dldlxxxx@gmail.com
를 입력하면

USER@KDP-SOLDESK1-02 MINGW64 /c/git_test (master)
$ git config --list
diff.astextplain.textconv=astextplain
filter.lfs.clean=git-lfs clean -- %f
filter.lfs.smudge=git-lfs smudge -- %f
filter.lfs.process=git-lfs filter-process
filter.lfs.required=true
http.sslbackend=openssl
http.sslcainfo=C:/Program Files/Git/mingw64/etc/ssl/certs/ca-bundle.crt
core.autocrlf=true
core.fscache=true
core.symlinks=false
pull.rebase=false
credential.helper=manager
credential.https://dev.azure.com.usehttppath=true
init.defaultbranch=master
user.name=Lee
user.email=dldlxxxx@gmail.com
가 생성된다( 변수 수정 )

# fatal: detected dubious ownership in repository at 오류 해결방법
USER@KDP-SOLDESK1-02 MINGW64 /c/git_test (master)
$ git config --global --add safe.directory c:/git_test/
를 입력해주면 오류가 해결된다.

# GIt 푸시하기 
USER@KDP-SOLDESK1-02 MINGW64 /c/git_test (master)
$ git status
On branch master
No commits yet
Untracked files:
  (use "git add <file>..." to include in what will be committed)
        abc.txt
nothing added to commit but untracked files present (use "git add" to track)
위에서처럼 git add를 입력하라고 나오므로 이에 따라본다.
USER@KDP-SOLDESK1-02 MINGW64 /c/git_test (master)
$ git add abc.txt
warning: in the working copy of 'abc.txt', LF will be replaced by CRLF the next time Git touches it


#깃 추가하기
$ git add abc.txt		버전관리에 추가한다.
#깃 버전관리에서 제거하기
$ git rm --cached abc.txt
rm 'abc.txt'			이 명령어는 버전관리에서 제외하는것에 포함된다.

# Git 저장소 만들기
$ cd /home/user/my_project		리눅스
$ cd /Users/user/my_project		MAC
$ cd /c/user/my_project			WINDOWS
입력후 $ git init 	를 실행하면 된다.

$ git add *.c
$ git add LICENSE
$ git commit -m 'initial project version'
 이 명령은 .git 이라는 하위 디렉토리를 만든다. .git 디렉토리에는 저장소에 필요한 뼈대 파일(Skeleton)이 들어 있다. 이 명령만으로는 아직 프로젝트의 어떤 파일도 관리하지 않는다. (.git디렉토리가 막 만들어진 직후에 정확히 어떤파일이 있는지에 대한 내용은 Git의 내부에서 다룬다) Git이 파일을 관리하게 하려면 저장소에 파일을 추가하고 커밋해야 한다. git add명령으로 파일을 추가하고 git commit명령으로 커밋한다:

USER@KDP-SOLDESK1-02 MINGW64 /c/git_test (master)
$ git commit -m 'First Version'
[master (root-commit) d9d9158] First Version
 1 file changed, 3 insertions(+)
 create mode 100644 abc.txt
커밋을 한번 하면 내용이 기록된다.

USER@KDP-SOLDESK1-02 MINGW64 /c/git_test (master)
$ git status --
On branch master
nothing to commit, working tree clean
했던 명령을 또하면 커밋된 내용이 없다고 뭐라 함 그러니까 뭘좀 추가해주자.

USER@KDP-SOLDESK1-02 MINGW64 /c/git_test (master)
$ cat >> abc.txt
ddd
eee
USER@KDP-SOLDESK1-02 MINGW64 /c/git_test (master)
$ cat >> hello.txt
hi my name is GEFORCE RTX 4070ti

USER@KDP-SOLDESK1-02 MINGW64 /c/git_test (master)
$ git status
On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   abc.txt

Untracked files:
  (use "git add <file>..." to include in what will be committed)
        hello.txt

no changes added to commit (use "git add" and/or "git commit -a")
깃에서 너 저거 추가되고 바뀌었는데 커밋 안했다고 말하고있다.(버전트래킹을 하고있다)
바로 추가해주자

USER@KDP-SOLDESK1-02 MINGW64 /c/git_test (master)
$ git add abc.txt hello.txt			를 입력
warning: in the working copy of 'abc.txt', LF will be replaced by CRLF the next time Git touches it
warning: in the working copy of 'hello.txt', LF will be replaced by CRLF the next time Git touches it

USER@KDP-SOLDESK1-02 MINGW64 /c/git_test (master)
$ git status
On branch master
Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
        modified:   abc.txt
        new file:   hello.txt
추가된게 보인다.

#GIT 실습문서 참조  
warning: in the working copy of 'abc.txt', LF will be replaced by CRLF the next time Git touches it		라는 경고가 종종 뜬다.
#LF will be replaced by CRLF in 해결 방안
이는 줄바꿈에 관한 경고가 뜨는 것인데, 이렇게 플랫폼(OS)마다 줄바꿈을 바라보는 문자열이 다르기에 형상관리를 해주는 Git이 바라볼 땐 둘 중 어느 쪽을 선택할지 몰라 경고 메세지를 띄워준 것이다. 
git config --global core.autocrlf true			>windows , dos
git config --global core.autocrlf input			>linux , mac
OS에 따라 저것을 택해서 입력해주자. >>오류 : 그래도 경고가 해결이 안됐음!!

여기까지만 하고 wow.txt 파일의 디렉토리로 가서 파일을 열어보자.
그러면 아래와 같이 LF 사용을 확인할 수 있다.
git은 아무 잘못이 없었다.
내가 파일 작성을 vim editor(CAT명령어)을 사용했기 때문에 LF를 쓴 것이다.
그렇다면 일반적으로 window 에서 텍스트 파일을 생성하고, 내용을 작성하면 어떨까?
당연히 window 운영체제에서 쓰는 CRLF를 사용한다.
>> 요약: touch.txt 일때는 windows에 따르지만, cat 명령어나 vim 명령어를 사용시 CRLF가 아니라 LF에 따르게 되므로, 결국 내 명령어가 잘못되었기 때문임.

USER@KDP-SOLDESK1-02 MINGW64 /c/Program files/git/etc
$ vim vimrc
git bash(window version)를 쓰다보면 내장된 vim editor도 자주 쓰게 된다.
하지만 이 vim은 사용하면 기본으로 fileformat=unix 설정을 사용해서,
Window 사용자면 본의 아니게 에러나 경고 메세지를 받을 수 있다.
대표적으로 git add 명령어 입력 시, 윈도우와 유닉스 계열 OS의 개행 방식의 차이 때문에
아래와 같은 경고 문구가 보이는 것이 그런 사례 중 하나다.
-시작하기 전에 vim을 실행시키고 :set fileformat을 입력하여 fileformat=unix
라고 나오면 아래 방법들을 적용하도록 하자.
-git bash의 vim 을 실행하자마자 :set ff=dos 을 입력해주면 된다.
한번하고 나면 하나의 파일에 대해서는 이 설정이 유지된다.
-만약 vim을 열자마자 그냥 default로 :set ff=dos가 설정되게 하고 싶다면
C:\Program Files\Git\etc 폴더에서 "vimrc" 파일을 열고 아래 2줄을 추가하면 된다.
set fileformat=dos
set fileformats=dos,unix
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

