
4주차_목요일 메모 (파이썬)
print("=" * 50) 로 줄처리하기

230914
오늘부터, 오전/오후 투트랙 진도를 나갈것임 >5주 월부터 AWS진도.
-파이썬; 위키독스 점프투 파이썬을 참조하였음
*내컴퓨터 > 시스템속성 > 고급탭 > 환경 변수 > Path > python변수가 있음
#################################################
강의교안_ 01 파이썬 개요		ctrl+/ 는 선택구간 주석처리.
-파이썬 설치 및 실행 후 인터프리터를 간단하게 이해해본다 
간단실행 cmd > python 입력
a=100
print ( a ) 
100
name= LEE
print ( name ) 
LEE
자신이 입력한 변수가 출력된다.	다만 변수 저장을 하지는 못한다.
~ 
파이썬폴더에 IDLE Shell 3.11.5의 경우 파이썬 아이들쉘로, 간단하게 결과출력이 가능 
이 쉘창에서는 내가 입력한 변수를 저장할 수 있다. 
만약 소스를 보관을 하고 싶으면 이것이 가능하다.
=======================================
-VisualCode를 설치 및 실행한다.
extensions(확장팩)에서 python을 설치한다
+extension pack을 설치

-VS Code 단축키 참조.
# 1. 파이썬 기본 문법(Syntax, Rule, Conventions)
주석은 #, 명령문 사용시에는 소문자를 사용.		터미널청소는 cls 명령어로 가능/
# 2. 파이썬 자료형 (문법)
-숫자형, 문자열 ,List, Tuple, Dictionary, Set, Bool 등등
8진수(Octal)? 0 ~ 7 , 3 bit
: 숫자가 0o 또는 0O(숫자 0 + 알파벳 소문자 o 또는 대문자 O)로 시작하면 8진수.
000 001 010 111
16진수(Hexa decimal, 2진수의 표현진법, 약칭진법)? 0 ~ 9, A, B, C, D, E, F
: 숫자가 0x로 시작하면 16진수.
1010(A) 1011(B) 1100(C) 1101 1110 1111(F)
~~~
1) 숫자형 - 거듭제곱 연산자( A**B ) = A^B
	나머지 연산자 ( % ) 나눗셈후 나머지를 반환_
	몫 연산자(//) 나눗셈후 몫을 반환

 
***tip) 문장 복사 =shift alt 위아래방향/ 문장 위치변경 = alt 위아래방향

2) 문자열 자료형
1. 큰따옴표(")로 양쪽 둘러싸기
print("Hello World")
2. 작은따옴표(')로 양쪽 둘러싸기
print('Python is fun')
3. 큰따옴표 3개를 연속(""")으로 써서 양쪽 둘러싸기 (문장을 여러개 묶기)
"""Life is too short,
You need python"""
4. 작은따옴표 3개를 연속(''')으로 써서 양쪽 둘러싸기
'''Life is too short,
You need python'''
~~
print("=" * 50)
print(f'{"My Program":^50}')
print("=" * 50)			를 입력하면,
==================================================
                    My Program
==================================================	이 출력됨
~~~
문자열 길이(length, 길이, 크기) 구하기
문자열의 길이는 다음과 같이 len 함수를 사용하면 구할 수 있다.
len 함수는 print 함수처럼 파이썬의 기본 내장 함수로 별다른 설정 없이 바로 사용할 수 있다.
str_name = "Life is too short"
print( len(str_name) )
17
~~
문자열 인덱싱과 슬라이싱
인덱싱(Indexing)이란? 무엇인가를 "가리킨다"는 의미
슬라이싱(Slicing)이란? 무엇인가를 "잘라낸다"는 의미
~~인덱싱과 슬라이싱 예제 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
my_list = [1, 2, 3, 4, 5]
# 리스트의 세 번째 요소를 인덱싱합니다.
third_element = my_list[2]
print(third_element)  # 출력: 3
# 리스트의 두 번째부터 네 번째 요소까지 슬라이싱합니다.
subset = my_list[1:4]
print(subset)  # 출력: [2, 3, 4]
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
문자열 포매팅
문자열 포매팅이란?
문자열 안에 어떤 값을 삽입하는 방법이다.
문자열 안의 특정한 값을 바꿔야 할 경우가 있을 때 문자열 포매팅 기법을 사용한다.
~~예제~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
name = "Alice"
age = 30
# 문자열 포매팅
message = "안녕, 나는 %s이고, %d살이야." % (name, age)
# s는 string '문자' 이고, d는 decimal '숫자'이다.
# 결과 출력
print(message)
안녕, 나는 Alice이고, 30살이야.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
f-문자열 (f-strings):
f-문자열은 파이썬 3.6 이상에서 사용 가능하며, 문자열 앞에 f를 붙여 변수나 값을 직접 삽입하는 방법입니다.
~~~~예제~~~~~~~~~~~~~~~~~~~~~~~~~~~
name = "Charlie"
age = 35
# 문자열 포매팅
message = f"안녕, 나는 {name}이고, {age}살이야."
# 결과 출력
print(message)
안녕, 나는 Charlie이고, 35살이야.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# 각 숫자를 왼쪽으로 정렬하고 너비를 5로 설정하여 포매팅
formatted1 = f"{number1:1}"
formatted2 = f"{number2:1}"
formatted3 = f"{number3:1}"

# 각 숫자를 오른쪽으로 정렬하고 너비를 5로 설정하여 포매팅
formatted1 = f"{number1:5}"
formatted2 = f"{number2:5}"
formatted3 = f"{number3:5}"
***너비(width)를 -5로 설정한 경우에도 결과가 동일하게 나오는 이유는 -5와 5 모두 숫자를 오른쪽으로 정렬하고 5자리로 맞춘다는 의미에서 동일합니다. %d 포매팅에서는 - 기호를 사용하여 숫자를 왼쪽으로 정렬할 수 있지만, 숫자를 오른쪽으로 정렬하려면 음수 너비를 사용하든 양수 너비를 사용하든 결과는 같습니다.
예를 들어, %d 포매팅에서 -5와 5를 사용한 경우에 결과는 모두 숫자를 오른쪽으로 정렬하고 5자리로 맞춥니다.

name = ("LEE", "MIKE", "LEGO")
age = ( 28, 35, 25)
print (name, age)
###>>>이 상태로 하면 결과값이 ('LEE', 'MIKE', 'LEGO') (28, 35, 25) 로 나온다.
~~~~~~~~~~~~~위 코드의 개선코드~~~~~~~~~~~~~~~~~
name = ("LEE", "MIKE", "LEGO")
age = (28, 35, 25)
# 두 튜플을 순회하면서 이름과 나이를 함께 출력
for i in range(len(name)):
    print(name[i], age[i])
###결과: 
LEE 28 
MIKE 35 
LEGO 25  로 이쁘게 도출된다.
~~~~~~~~~~~~~~다른코드2~~~~~~~~~~~~~~~~~~~~~~~
name = ("LEE", "MIKE", "LEGO")
age = (28, 35, 25)
# 이름과 나이를 함께 출력
for i in range(len(name)):
    print(f"{name[i]} {age[i]}살")
###결과: 
LEE 28살
MIKE 35살
LEGO 25살
~~~~~~~~~~~~~~뉴스기사(크롤링)에서 특정  단어를 찾는 코드~~~~~~~~~~~~~~~
str_name ="""축구 대표팀의 2차례 원정 평가전에 출전했던 손흥민을 비롯한 유럽파 선수들이 이번 주말부터는 소속팀으로 복귀해 활약을 이어갑니다. 프리미어리그 토트넘에서 뛰고 있는 대표팀 주장 손흥민은 모레(16일) 셰필드를 상대로 2경기 연속 골에 도전합니다. ~어제 조코비치가 출전하지 않은 가운데 우리나라를 3대 0으로 물리치고 첫 승을 올렸습니다."""
print(str_name.count('손흥민'))    #결과: 3회
 
>> " "에서는 syntax error가 발생하는데, 이 이유는 2차례, 2경기, 16일 과 같은 숫자(deciamal)이 포함되었기 때문이다. 따라서 """ """ 구문을 사용하여 숫자와 문자를 한 단어로 인식하게끔 해주면, 결과값이 잘 도출된다.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# 3. 리스트 자료형
숫자로만 구성된 리스트
	list2 = [1, 2, 3]
문자열로만 구성된 리스트
	list3 = ['kim', 'seoul', 'sales', 'manager']
숫자와 문자로 혼합된 리스트
	list4 = [1, 2, 'kim', 'seoul']
리스트 자체가 포함된 다중 리스트
	list5 = [1, 2, 3, ['kim', 'lee', ‘park’] ]

리스트의 인덱싱
다중 리스트에서 인덱싱하기
리스트를 다중으로 중첩해서 쓰면 혼란스럽기 때문에 자주 사용x 알아두는것이 좋다.
리스트의 슬라이싱
문자열과 마찬가지로 리스트에서도 슬라이싱 기법을 적용할 수 있다. 슬라이싱은 ‘나눈다’
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
list1= [10,20,30,40,50]
list2= ["LEE","KIM","PARK","CHOI","SIN"]
print(type(list1))
print(type(list2))
list3 = list1.sort(reverse=True)
print(list1) # list1출력 [50,40,30,20,10]

list1 = [10, 20, 30, 40, 50]
# list1을 복사하고 뒤집어서 list3에 저장
list3 = list1.copy()
list3.reverse()
print(list3)  # list3 출력: [50, 40, 30, 20, 10]
~~~~~~~~~~~~~~~~~~~~~윗윗코드의 개선~~~~~~~~~~~~
list1 = [10, 20, 30, 40, 50]
# list1을 복사하고 정렬한 뒤 뒤집어서 list3에 저장
list3 = sorted(list1, reverse=True)
print(list3)  # list3 출력: [50, 40, 30, 20, 10]
~~~~~~~~~~~~~~~~~~만들어진 리스트에 추가하고싶을때~~~~~~~~~~~~~~~~~
list1 = [10,20,30,40,50]
list1.append(100)           
print(list1)
#[10, 20, 30, 40, 50, 100] 이 도출
print(list1.pop())
# 100  :마지막에 추가된 녀석이 나오도록 꺼내줌
print(list1.pop())
print(list1.pop())
print(list1.pop())
#결과
50
40
30				오른쪽에서 하나씩 지워나감
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# 4. 튜플(tuple) 자료형   ,immutable
튜플(tuple)은 몇 가지 점을 제외하곤 리스트와 거의 비슷하며 리스트와 다른 점
 리스트는 [ ]으로 둘러싸지만 튜플은 ( )으로 둘러싼다.
² 한번 만들어지면 바꿀수 없다는 특징이 있다.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
fruits = ("apple", "banana", "cherry")
# 인덱스를 사용하여 요소에 접근
first_fruit = fruits[0]
second_fruit = fruits[1]
print(first_fruit)  # 출력: 'apple'
print(second_fruit)  # 출력: 'banana'
###################################################
fruits = ("apple", "banana", "cherry")
# 튜플의 길이 확인
length = len(fruits)
print(length)  # 출력: 3
###################################################
fruits = ("apple", "banana", "cherry")
# 튜플 언패킹
fruit1, fruit2, fruit3 = fruits
print(fruit1)  # 출력: 'apple'
print(fruit2)  # 출력: 'banana'
print(fruit3)  # 출력: 'cherry'
###################################################
a =100
b =200 
print(f'a= {a} , b ={b}')		#a= 100, b =200
(a,b) = (b,a)     >>>튜플이다.
print(f'a= {a} , b ={b}')		#a= 200 , b =100
print(f'a= {a} , b ={b}')		#a= 200 , b =100
(b,a) = (a,b)    #튜플 언패킹
print(f'a= {a} , b ={b}')		#a= 100, b =200
##################################################
# t1 = (1,2,3)
# list1 = list(t1)
# list1.append(4)
# t2 = tuple(list1)
# print=(t1)
#>>오류남.

t1 = (1, 2, 3)
list1 = list(t1)
list1.append(4)
t2 = tuple(list1)
print(t1)  # 출력: (1, 2, 3)
print(t2)  # 출력: (1, 2, 3, 4)
**주어진 코드에서는 t1 튜플을 리스트로 변환한 후 4를 추가하고, 다시 튜플로 변환하여 t2에 저장하는 과정을 수행하고 있습니다. 그러나 t1은 그대로 유지되어야 하므로, t1을 변경하지 않고 t2에만 새로운 값을 저장해야 합니다.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# 5. BOOL 자료형
print ("=" * 50)
is_true = True
is_false = False
print(is_true)  # 출력: True
print(is_false)  # 출력: False
###########################################
x = 10
if x > 5:
    print("x는 5보다 큽니다.")  # 출력: "x는 5보다 큽니다."
if x == 3:
    print("x는 3과 같습니다.")  # 출력되지 않음
###########################################
a = True
b = False
# 논리 연산자 사용
result_and = a and b  # a와 b가 모두 True인 경우에만 True
result_or = a or b    # a 또는 b가 True인 경우에 True
result_not = not a    # a의 반대 값

print(result_and)  # 출력: False
print(result_or)   # 출력: True
print(result_not)  # 출력: False
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

파이썬 첫날인데 나름 재미있고 배울만한 언어인 것 같다.
