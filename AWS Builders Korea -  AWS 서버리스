AWS Builders Korea Program [기초 과정] : AWS 서버리스로 서버 없이 간단한 웹 애플리케이션 만들기 - 2023년 11월 6일 (월) 9:00 AM – 12:00 PM

 
Lambda 서비스를 사용하여 서버리스를 구축하는 것을 이해한다.

 
 
람다는 다양한 서비스+개발에 있어서 필요한 분야를 지원한다.
정적 웹사이트와 앱&서비스에 대해서 핸즈온을 하도록 함
Lambda와 API Gateway에 대한 이해를 가지도록한다
RESTful : HTTP API와 Rest APIs
클라이언트에 보낸 요청에 대하여 응답을 받는것이 http api.
지속적 양방향 통신을 하고자 할 때는 WebSocket API를 사용
AWS DynamoDB또한 NoSQL기반의 서버리스 관련 서비스다. DB관리의 어려움을 해결하는 도구

 
ㅇㅖ시는 장바구니 테이블에 해당한다. 다이나모디비는 서버리스이므로 무한대에 가까운 아이템을 입력할 수 있음. 어트리뷰트는 다양한 데이터형식이 지원된다. primary key는 고유한 식별자임.
 
프로비저닝없이 람다를 생성해보는 함수를 생성한다.
우선 핸즈온에 있어서 IAM사용자를 새로 만드는 과정부터 진행
 
이 과정을 진행하도록 할것임.
Root 계정을 바로 사용하는 것은, 보안상 좋지 않기에 IAM 접근제어 관리를 통해 각 유저에게 권한을 준 다음 사용하도록 한다.
 
 

 
위의 Administrator 정책을 선택해준다.
 
 

https://gayoiki.signin.aws.amazon.com/console 로 접속할 수있다.
 
방금만든 것을 입력한다.
 
새로 어드미니스트레이터 계정에 접속했다. 다음으로는 리전을 서울로 변경해주도록함.

Lambda로 웹서버 생성하기파트를 진행한다.
 
AWS에서 제공하는 blueprint를 사용해서 함수를 만들어보자.
 
 

 
 
Code Source에서 테스트
 
 
테스트 컨피규레이션을 저장해서 테스트한다.

 
Response에서 Hellow!가 출력되었다.

# Simple webpage Lambda 생성하기
 이번에는 정적 웹페이지를 새로 만들어보도록 한다.
 
Create a new role with basic Lambda permissions 를 Role로 선택해준다.
접혀져 있는 Advanced settings 을 열어서, 추가로 세팅을 한다.
 

 
실제로 만들어낸 펑션기능이 URL로 바로 웹에 접속할 수 있도록 설정되어 생성되었다.

 
코드를 작성하고 Deploy한다.
아까 생성한 URL로들어간다면
 
위 화면이 정상적으로 등장한다.

# Api service lambda 생성
빈껍데기 웹페이지를 만들었다면 이번에는 빈껍데기 웹페이지가 동적으로 반응하도록 해보자. who are you
 
 
 
 
정책 탬플릿까지 연결했으면, 다음으로 넘어간다.
 
미리 제작한 코드를 넣고 배포한다. 멤버의 이름과 기분 상태를 랜덤으로 매핑시켜주고, 이를 DynamoDB에 저장하는 기능을 가진 코드이다.
 
 
에러가 나는데, 현재는 DynamoDB를 만들지 못하였으므로 에러가 뜨는것은 자연스러운 현상이다.

# DB와 API Gateway 구성하기
이번 세션에서는 이 두가지 서비스를 생성하고 lambda 와 연결해서 좀 더 완성도있는 서비스를 제작해보도록 한다.
 
Table name 은 hello-member 로, Partition key는 name 으로 작성
람다함수 내 put item에 ‘name’/ status에 ‘status’ 값을 넣을 partition key를 만드는 과정이다.
 
조금 생성에 시간이 걸린뒤, 성공적으로 생성되었다.
 
 현재까지 생성한 서비스의 목록이다.
실제로 DynamoDB 테이블을 생성한 뒤 람다 API호출 함수에 가면, 에러는 나지 않음.
 

# Api gateway 생성하기
 HTTP API 보다 API 관리 기능이 더 추가되어 있는 REST API 로 생성해본다.
 
 
 
Create Method 화면이 나오고 여기서 API를 구성할 수 있다. 
 
GET 메서드를 호출할 타입을 생성하며,
백엔드인 api를 호출해야하므로, arn:aws:lambda:ap-northeast-2:979191294468:function:api-service-create 를 람다 펑션에 연동시켜주도록 한다.

 
테스트를 해보면 랜덤값이 나오게 된다.
body 값에 
{"name": "Jone", "status": "Happy"}
{"name": "Penny", "status": "Happy"}
{"name": "Ama", "status": "Serious"} 등 랜덤한 값이 등장한다.

# Api gateway 추가 설정하기
생성한 API의 Resources 메뉴에서 Enable CORS 를 클릭
 
Access-Control-Allow-Methods 중 방금 생성한 GET Method를 선택한 후 Save 버튼을 클릭
 
 
배포가 완료되면 Invoke URL이 등장한다. 
 
개인마다 다르므로 이걸 복사해서 저장해두자.
https://mcathlcqt4.execute-api.ap-northeast-2.amazonaws.com/dev
클릭해서 들어가면 return 값이 잘 나오게된다. API 배포가 잘 되는중이란 뜻이다.

현재까지 구조도는 이렇다.
 

# Lambda 와 다른 서비스 연결하기
 
람다 웹페이지 함수로 다시 들어온다.
 
해당부분에 아까 invoke URL을 넣어본다.
 

URL로 다시 접속하게되면,
 

 

 
Who are you? 버튼을 누를때마다 랜덤한 값이 DynamoDB에서 호출되어 도출된다.

이제 DynamoDB 데이터베이스에 이 문구가 실제로 저장되어 있는지 확인한다.
DynamoDB로 이동한다.
 
 
실제로 띄운 결과값들이 DB에 들어가있는 것을 확인 할 수 있다.
DB안에 호출된 각각의 값은 Unique한 값이며, 혹여 name이 같더라도 중복되지 않는 이유는 고유한 식별자를 가지기 때문에 중복된 값이 아니기 때문이다.
서버를 생각할 필요없이 서비스 구성에만 집중할 수 있다는 것이 서버리스의 장점이고 
익숙해진다면 더 빠른 속도로 만들 수 있을 것 같다.
이제 웹페이지와 서비스, 그리고 데이터베이스가 서로 연결이 되어 있는 모습을 볼 수 있다.
 
# 생성한 리소스를 삭제하기
사실 서비스 생성도 중요하지만, 비용적 측면에서 생성한 서비스들을 ‘잘’ 삭제해야 비용청구의 부담에서 완전히 벗어날 수 있다. 또한 이번 실습에서는 보안을 설정하지 않았으므로 꼭 잘 삭제해주어야 한다.
 
DynamoDB의 경우는 테이블의 백업본을 남기면서 삭제할 수도 있다는 것을 유의하자.


