
5주차_주간 메모(AWS) (월~금)

*AWS 프리티어를 통해 계정을 만들고, 실습하도록 한다.
 루트사용자 계정생성 및 별칭 생성 - 리전을 서울로 변경 - MFA할당 및 설정- admin사용자 계정의 생성 - 리전을 서울로 변경 - MFA할당 및 설정 - 컴퓨팅 항목으로 이동 ( EC2 ) - 인스턴스의 시작 - 
*** 인스턴스 '종료'= 삭제이므로 필히 알것 // 서버를 없애지않고 끄려면 '중지' 

# 1. Amazon Web Services 개요
오늘230918부터는 AWS의 기초와 개요를 알아보는 시간을 가진다.
 컴퓨팅, 스토리지, 데이터베이스, 분석, 네트워킹, 모바일, 개발자 도구, 관리 도구, IoT, 보안 및 엔터프라이즈 애플리케이션을 비롯하여 광범위한 글로벌 클라우드 기반 제품을 몇 초 이내에 온디맨드(수요에 의한 만큼) 방식의 종량제 요금으로 제공

서비스형 인프라(IaaS)
서비스형 인프라(IaaS)에는 클라우드 IT의 기본 구성 요소가 포함되어 있어 일반적으로 네트워킹 기능, 컴퓨터(가상 또는 전용 하드웨어) 및 데이터 스토리지 공간에 액세스할 수 있습니다. IaaS는 IT 리소스에 대한 최고 수준의 유연성 및 관리 제어 기능을 제공하며 오늘날 많은 IT 부서 및 개발자에게 익숙한 기존 IT 리소스와 아주 유사합니다.
서비스형 플랫폼(PaaS)
서비스형 플랫폼(PaaS)을 사용하면 기본 인프라(대개 하드웨어 및 운영 체제)를 관리할 필요가 없으므로 조직은 애플리케이션 배포 및 관리에 집중할 수 있습니다. 즉, 애플리케이션 실행과 관련된 리소스 구매, 용량 계획, 소프트웨어 유지 관리, 패치 또는 다른 모든 획일적인 작업에 대한 부담을 덜어 더욱 효율적이 되도록해줍니다.
서비스형 소프트웨어(SaaS)
서비스형 소프트웨어(SaaS)는 서비스 공급자가 운영하고 관리하는 완제품을 제공합니다. 대부분의 경우 서비스로서의 소프트웨어라고 하면 최종 사용자 애플리케이션을 말합니다. SaaS를 사용하면 서비스가 유지관리되거나 기본 인프라가 관리되는 방식은 신경 쓸 필요가 없고 그 특정 소프트웨어를 어떻게 활용할 것인지만 생각하면 됩니다. SaaS 애플리케이션의 흔한 예는 이메일을 주고 받는 데 사용하는 웹 기반 이메일을들 수 있는데, 이 경우 이메일 제품에 추가되는 기능을 관리하거나 이메일 프로그램이 실행되는 기반인 서버및 운영 체제를 유지 관리할 필요가 없습니다.
########
#MFA (Multi - Factor Authentication)  : 다요소 인증(2차인증) 설정
 > 보안 자격증명 및 규정 준수 탭으로 이동.
 > MFA 디바이스 할당 
 > MFA 디바이스 선택
 > QR코드 표시
 > 스마트폰의 google authenticatior 추가
 > 내 보안 자격증명이 추가되었음.
'You can register up to 8 MFA devices of any combination of the currently supported MFA types with your AWS account root and IAM user. With multiple MFA devices, you only need one MFA device to sign in to the AWS console or create a session through the AWS CLI with that user.'
>로그아웃 후 재 로그인을 위해서는 root의 '별칭' 을 입력 후 admin의 id, pw를 입력해 접속

#인스턴스 시작 (EC2>인스턴스)
>MyServer-AWS-1 생성
>Quick start 로 Amazon Linux 확인
>Amazon linux 2023 AMI 가상머신 이미지 선택
>인스턴스 유형 정보 확인
 -키 페어(로그인) >새 키 페어 생성(MyServer-AWS-1) / RSA type/ .pem type/ 
 생성시 key file이 컴퓨터에 생성됨.
>네트워크 설정 확인
 -보안그룹 SSH 트래픽 허용
>스토리지 구성 (EBS)

생성 후 인스턴스 상태(default: 대기 중 > 실행 중)를 확인하기
>인스턴스에 연결
>EC2 인스턴스 연결
-사용자 이름 확인(default: ec2-user) > 퍼블릭ip 주소 백업 및 실행.
useradd test1 입력 시> permission denied가 뜸. >sudo useradd test1> access
[ec2-user@ip-172-31-35-115 ~]$ ls -l /home
total 0
drwx------. 3 ec2-user ec2-user 74 Sep 18 07:50 ec2-user
drwx------. 2 test1    test1    62 Sep 18 07:56 test1		생성
exit 후 좌측 상단 ec2를 클릭

#SSH로 인스턴스에 접속
EC2 대시보드 > 인스턴스 > 퍼블릭 IPv4주소를 확인 > 인스턴스에 연결> SSH 클라이언트 탭이동 > 
1. SSH 클라이언트를 엽니다.(XShell 클라이언트 이용)
2. 프라이빗 키 파일을 찾습니다. 이 인스턴스를 시작하는 데 사용되는 키는 MyServer-AWS-1.pem입니다.
3. 필요한 경우 이 명령을 실행하여 키를 공개적으로 볼 수 없도록 합니다.
 chmod 400 MyServer-AWS-1.pem
4. 퍼블릭 DNS을(를) 사용하여 인스턴스에 연결:
 ec2-~~~~~.ap-northeast-2.compute.amazonaws.com

<1-1. XShell 이동>
새로만들기> host에 공인ip 혹은 공인 DNS를 입력 (호스트) > 사용자인증
>ID: ec2-user (root x), 퍼블릭 키 설정 이동 후 가져오기로 .pem 파일을 가져오기
>MyServer-AWS-1 키가 있는것을 확인가능
>키가 있기 때문에 암호는 입력하지 않아도 됨
>연결하면 AWS LINUX에 원격접속 완료.

<1-2. 권한부여>		이단계는 ubuntu에서의 초기설정 방법과도 같다.
passwd root 를 입력하면 접근 불가
~]$ sudo passwd root	를 사용하면 가능
암호- aws로 설정
~]$ su - root 	로 root에 원격접속 가능.
~]# sudo grep wheel /etc/sudoers 		로 모든권한 부여
~]# grep wheel /etc/group			로 그룹을 확인
wheel:x:10:ec2-user				

#Session Manager 서비스

#EC2 직렬콘솔
활성화

#윈도우(Windows) 인스턴스의 경우
~인스턴스에 연결> RDP 클라이언트 탭
 원격데스크톱 (win r)
컴퓨터에 퍼블릭DNS 입력	이름 administrator 	입력
>암호입력은 RDP 클라이언트에서 표시된 암호를 ctrl v 
연결하여 원격으로 접속한다.


>>(월) 오늘은 아마존AWS에 접속해서 실습을 해봤다. 구글계정과 aws계정, 루트로그인과 MFA 인증및 설정, IAM 사용자 그룹설정 활용까지 생각해보면 좋을 듯 하다.

#######################################################################################################################

# AWS IAM
1. IAM 이란 Identity and Access Management 의 약자로, 누군가 어떤 리소스나 서비스를 사용할 수 있는지에 대해서 접근 레벨이나 권한관리 기능을 제공하는 서비스이다. 리전에 구애받지 않고 유니버설하게 설정된다.

데이터 엔지니어 team > S/W 엔지니어 team > 데이터 분석 team 별로 업무 분업화를 통해서 조직 내 유저에게 역할을 부여하게 된다.
유저, 그룹, 역할, 정책     네 가지로 나뉘며 각각의 특징이 있다.
 

#EC2 란
Elastic Compute cloud 의 약자이며, AWS에서 클라우드 공간에 크기가 유연하게 변경되는 가상서버 기능을 제공하는 서비스를 말한다. EC2는 인스턴스라고도 불리며, 내가 대여한 클라우드 공간에 가상 서버를 만들어서 AWS에서 제공하는 다양한 애플리케이션을 실행이 가능하다.
<특징> 
온- 디맨드 (On-Demand) 방식 : 소위 '쓴 만큼' 요금을 지불하는 방식의 서비스에 해당.
리저브드 (Reserved) 방식 : 장기 약정 방식 (1~3년) 선불 upfront로 비용을 지불하므로 개발			중에 상황이 변하지 않는다면 기간대비 저렴하다는 장점을 가진다
스팟 (Spot) 방식 : 인스턴스 가격을 입찰하여 구매할 수 있는 방법. 이는 즉 AWS의 장비의 		휴무상태가 많거나 사용하려는 고객이 적을 때, 시장 경제에 따라 입찰하게되		며 사용이 가능하다. 불확실성이 높음.

#EBS 란
Elastic Block Store 의 약자이며, 블록단위로 읽고 쓰는 저장장치들을 일컫는다. 

#EC2 실습 (2단계)
네트워크 및 보안
> 보안그룹 탭 
> 공장초기화* launch-wizard-1,2 
> 보안 그룹 삭제로 초기화 

> Default 세부정보 내 인바운드 규칙 확인 
> 서비스 -  네트워크 및 콘텐츠 전송 탭 
> *VPC 대시보드에 등록 > VPC 신규 탭   	*Virtual Private Cloud(VPC)
> IPv4 *CIDR (172.31.0.0/16)를 확인      *Classless Inter-Domain Routing(CIDR)
> 서브넷 ID는 각기 다르나, 탭의 VPC는 모두 동일함.
> 한편 IPv4 CIDR은 다른것을 알 수 있음.

> 인스턴스 탭 - 인스턴스 시작
> AMI - Windows Server(hvm)로 시작 
> 인스턴스 유형의 비용표도 확인.
 
>키페어 생성 (다운로드) 
>네트워크 설정 - 편집 - vpc - 서브넷을 172.31.0.0/20 으로 선택
>방화벽(보안그룹) - 기존 보안 그룹 선택>default vpc선택 
>인스턴스 시작 > 완료
+ AWS-Server-2를 다시 만들어서 총 두개의 인스턴스 만듦

>모든 인스턴스 보기에서 인스턴스 2개(AWS-Server-1,2가 실행 중) 가 활성화됨.
>퍼블릭 dns, 프라이빗 dns를 메모 및 복사
> 인스턴스에 연결 > RDP 클라이언트 탭
> 암호 가져오기 > 프라이빗 키 파일업로드
> 인스턴스 인바운드 규칙 편집 > 소스_Anywhere-ipv4 0.0.0.0 규칙추가 및 저장

> 원격 데스크탑으로 이동(PC_window R) >옵션 표시
> 컴퓨터 이름(서버1, 2 퍼블릭 DNS) / 사용자 이름 Administrator 
> 서버암호를 입력하면 원격접속이 가능.

총 두개의 원격 서버접속을 성공하였음.
서버1에서 서버2로 ping을 하면 전송되지 않는다.(default : 방화벽 차단)
>> CMD 창에서 netsh명령어를 사용하여 방화벽 규칙을 추가한다
advfirewall firewall add rule name="Ping" protocol=icmpv4:8,any dir=in action=allow
방화벽 규칙을 추가
다음 명령어를 사용하여 ICMP 프로토콜(편리하게도 "ping"은 ICMP를 사용합니다)을 허용하는 방화벽 규칙을 추가합니다.
OR
>Server manager을 열기 > Tools 
>Windows Defender Firewall with Advanced Security 탭
 
>Inbound Rules탭
>목록 중 File and Printer Sharing을 모두 블럭지정 후 규칙 활성화
 
(적어도 ICMPv4 , ICMPv6은 활성화하기)
>우측 서버2도 동일하게 설정
>이후 서로의 IP로 핑을 보내면 잘 보내지는 것을 알 수 있다.
~~
세번째 인스턴스 생성
> 네트워크 설정 > 서브넷 172.31.0.0/20으로 설정
> 보안그룹생성 및 이름 설정(자동)
>인바운드 보안 그룹규칙( TCP, 3389, 0.0.0.0/0 ) 을 확인.
 
*리눅스의 경우 SSH,   윈도우의 경우 RDP 유형에 해당한다.
>인스턴스 시작.

>접속 후 리부팅을하면 퍼블릭도메인과 IP가 재할당되므로, 유의하여야 한다.
>비용청구가 되지 않으려면 인스턴스의 중지를 꼭 하고 나오기
>인스턴스 종료(제거) 도 가능하다.
>스냅샷 기능을 으로 작업을 이을 수 있다.

>Server Manager의 대시보드에서 퀵스타트(Add roles and Features)선택
>Web Server 체크, Add Features  및 설치 진행.
 
>엣지 127.0.0.1로 접속
 

> 인스턴스>서버 1 우클릭 후 이미지 및 템플릿 탭에서 이미지생성
> "My-Win-Server-Image-2022"  / 설명- "IIS 설정 완료"
> 우측 하단에 이미지 생성(한글x)
> AMI를 생성하였음.

 
>새로운 인스턴스 시작
>애플리케이션 및 os이미지에서 이후로부터 "내 AMI"가 생겨서 선택이 가능
>사후작업이 필요없어진다. 

#######################################################################################################################

# 아마존 이벤트 _AWS Training and Certification
https://aws.amazon.com/ko/certification/?nc2=sb_ce_co  AWS SAA C03자격증 설명이 있다.
230920 수요일 학습 개요

-aws 콘솔열기
루트계정 로그인
EC2 : AWS 리눅스 기본 구성
 동일한 서브넷 : 172.31.0.0 /20 할당
  $ sudo -s
Tab Key 자동 완성 설치
  # yum install bash-completion
  # source /etc/profile.d/bash_completion.sh
-방화벽 설치
  #
  #
-NetworkManager 설치
  #
  #
-httpd 설치 및 테스트
  #
  #
-EBS(블럭 스토리지) 만들기
-AMI 이미지 만들기
-----------------------------------------
-ELB 추가하기
-오토 스케일링 그룹 만들기
-S3(객체 스토리지) 만들기
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# 인스턴스 시작 (아마존 리눅스 생성)
>AWS-amazon-1 생성
>Amazon linux AMI로 선택
>서브넷 172.31.0.0/20로 선택
>보안그룹 이름이 자동으로 생성되는데, launch-wizard-aws-1 로 변경
>인바운드 보안그룹규칙 ssh 
>스토리지 구성- 스토리지유형 EBS 10GB 추가.	- standard EBS볼륨 선택.
종료시 삭제를 '아니오'로 선택 후 인스턴스 생성.
 
~~~~~~~
>아마존 리눅스 인스턴스 실행 (2개 리눅스 인스턴스 모두)
Xshell 을 실행 > 초기화
 >이름: AWS-1
 >호스트: 퍼블릭 ip주소 (EC2)
 >사용자인증> ec2-user - public key 설정>가져오기>연결>수락 및 저장.

>XShell에서
~]$ hostname 입력
~]$ cat /etc/hostname
sudo -s로 root 계정으로 이동 (직렬콘솔에서는 의미없으니 exit)
~]$ sudo passwd root
pw를 redhat으로 설정.
~]$ su  - root 를 입력하고 pw redhat을 입력하여 root로 진입
> ~]# yum install bash-completion 로 설치.   *자동완성(tab기능)을 설치하는것임
> ~]# source /etc/profile.d/bash_completion.sh 	로 리프레쉬를 실행한다.

>방화벽 설치
iptables를 입력해봤을때 나오지 않는다면 방화벽이 없는것임.
[root@ip-172-31-11-197 ~]# df -hT
/dev/xvda1     xfs       8.0G  1.5G  6.5G  19% / 를보면 설치된 프로그램이 1.5G밖에안되므로 설치가 되지 않은 기능일수도 있다는 추론이 가능.
[root@ip-172-31-11-197 ~]# yum install firewall* -y   로 방화벽서비스 설치.
[root@ip-172-31-11-197 ~]# systemctl status firewalld.service  로 확인하면
     Active: inactive (dead)	상태임.
[root@ip-172-31-11-197 ~]# systemctl enable --now  firewalld.service  로 활성화.

>네트워크 매니저 설치
[root@ip-172-31-11-197 ~]# yum install network-scripts.x86_64 -y
[root@ip-172-31-11-197 ~]# yum install httpd* -y
[root@ip-172-31-11-197 ~]# systemctl enable --now httpd.service  로 활성화
[root@ip-172-31-11-197 ~]# firewall-cmd  --permanent --add-service=http
success
[root@ip-172-31-11-197 ~]# firewall-cmd  --reload
success

>퍼블릭 dns에 접속 시도하기
[root@ip-172-31-11-197 ~]# curl http://localhost  를 입력 시 
<html><body><h1>It works!</h1></body></html>		출력되면 ok
그런데 웹에 퍼블릭 dns에 접속하지는 못함. 
> EC2대시보드로 이동.
보안그룹> 인바운드 규칙 편집 > 규칙 추가
http(port : 80) , anywhere ipv4( 0.0.0.0 ) 규칙을 추가함.
>이후 http://ec2-13-124-114-47.ap-northeast-2.compute.amazonaws.com/ (퍼블릭dns) 에 접속시 It works! 가 출력됨.

>스토리지를 확인 ( EBS 관련 )
AWS amazon-1은 스토리지 8+10으로 설정해뒀다. 디바이스를 확인해보면 
/dev/xvda 가 8GB 볼륨,  /dev/sdb가 10GB볼륨을 가지고 있다. 
>Elastic Block Store 탭으로 이동
10GB 확인
>스토리지에 볼륨 생성
gp2, 5GB로 설정하기 > Name 편집에서 AWS-2
10GB를 > AWS-1로 설정
>생성한 AWS-2를 볼륨연결 > 인스턴스를 선택(AWS-2)  
/dev/sdf :default 로 되어있다.
/dev/sdb 로 수정함. 
>인스턴스에서 아마존2를 확인하면 스토리지에 볼륨5기가가 마운트되었음을 알 수 있다.
종료 시 삭제 : 아니오로 되어있는것이 보임.

>ping (ICMP 활성화)
인바운드 규칙 편집> 규칙 생성
>모든 icmp ipv4 유형, anywhere ipv4 후 규칙 저장.
이후 핑으로 두 서버간 통신하면 잘 된다. (쌍방 인바운드 허용)

인스턴스에서 이미지 생성하기(AMI 생성)
>MY-AmazonLinux-1 , 
>재부팅 안함 활성화와 비활성화 차이가 있으나 체크 안함
>이미지생성
이 상태에서 AWS amazon 3을 생성할때 이 이미지를 선택하면 똑같은 설정으로 생성됨.
>MY-AmazonLinux-2 도 동일하게 생성
>인스턴스 생성하기(aws 3)
>내 AMI 탭으로 이동
>MY-AmazonLinux-1 머신 이미지로 이동
서브넷 설정이 혹시나 풀려있다면, 탬플릿 설정을 해야 함.
>생성 후 인스턴스에 연결 시도하면, 사용자 이름이 root로 바뀌어있는 것을 알 수 있음.
[root@ip-172-31-4-122 ~]# systemctl status httpd
[root@ip-172-31-4-122 ~]# firewall-cmd --list-services 
[root@ip-172-31-4-122 ~]# lsblk			를 입력해서
NAME      MAJ:MIN RM SIZE RO TYPE MOUNTPOINTS
xvda      202:0    0   8G  0 disk 
├─xvda1   202:1    0   8G  0 part /
├─xvda127 259:0    0   1M  0 part 
└─xvda128 259:1    0  10M  0 part 
xvdb      202:16   0  10G  0 disk 
10GB가 들어와있는것을 확인 할 수 있다.
>보안그룹에 규칙추가한  http(포트 80), ICMP  두가지는 기존 인바운드에서 선택해야 적용됨을 알도록 하자.

>AWS 3,4 를 종료해도, EBS의 볼륨탭으로 들어가면 
 
내 AMI가 남아있는것을 알 수 있다.

#RedHat 이미지로 인스턴스 생성
>RedHat-1 이름으로 ami는 redhat으로 설정
>RedHat-1-key 키페어 생성
>서브넷 172.31.0.0/20 설정
>보안그룹 AWS-1에서 설정한 기존 보안그룹을 선택.(default X)
>스토리지 구성 > 인스턴스 시작.
인스턴스 연결에서 AWS-1로 EC2인스턴스연결은 가능하다.
but, RedHat 으로 EC2인스턴스연결을 시도하면 실패 알림이 뜨게된다.(미설치기 때문)
>SSH 클라이언트 탭으로 이동
XSHELL로 이동
세션만들기로 RedHat-1 /호스트에 퍼블릭dns를 붙임 
> 사용자인증에서 퍼블릭 키 선택후 설정> 키를 가져옴.  
 
*만약 보안규칙이 적용되지 않았다면 확인하기 = icmp , http(port 80)
>sudo -s 입력 후 exit
>sudo passwd root
redhat을 패스워드설정
>su - or su - root로 루트계정 진입
[root@ip-172-31-12-15 ~]# yum install bash-completion	으로 자동완성,탭키 활성화
[root@ip-172-31-12-15 ~]# source /etc/profile.d/bash_completion.sh  로 Refresh 실행.
[root@ip-172-31-12-15 ~]# yum -y install firewall*   로 방화벽기능을 설치
[root@ip-172-31-12-15 ~]# systemctl enable --now firewalld
[root@ip-172-31-12-15 ~]# yum -y install httpd	로 httpd 기능 설치
[root@ip-172-31-12-15 ~]# systemctl enable --now httpd
[root@ip-172-31-12-15 ~]# firewall-cmd --permanent --add-service=http
success
[root@ip-172-31-12-15 ~]# firewall-cmd --reload
success
[root@ip-172-31-12-15 ~]# yum install vim* -y
[root@ip-172-31-12-15 ~]# yum install tree* -y
* [root@ip-172-31-12-15 ~]# yum install epel-release -y 은 레드햇에서 설치되지 않는다. 아마도 상업적인 이유인듯(구독해야 외부 프로그램 제공)

>이미지 생성 RedHat
MY-RedHat-AMI-1 로 설정하고 생성하면 
이미지>AMI> MY-RedHat-AMI-1 라는 AMI가 생성되어있는 것을 확인가능하다


[root@ip-172-31-11-197 html]# vim index.html
[root@ip-172-31-11-197 html]# su - ec2-user
[ec2-user@ip-172-31-11-197 ~]$ sudo scp /var/www/html/index.html 172.31.9.161:/var/www/html/	을하면 
~~
The authenticity of host '172.31.9.161 (172.31.9.161)' can't be established.
ED25519 key fingerprint is SHA256:glSm5vPs7ZcboXDnvN21NywzqzdiYPHOjpQs2eXg+ME.
This key is not known by any other names
Are you sure you want to continue connecting (yes/no/[fingerprint])? 
root@172.31.9.161: Permission denied (publickey,gssapi-keyex,gssapi-with-mic).
Connection closed
오류가 뜨는데,
[ec2-user@ip-172-31-11-197 ~]$ ssh ec2-user@172.31.9.161 으로도 원격접속이 권한부여되지 않는다.
~~
####################################################################
230921 목 메모

AWS 실습    #로드밸런싱
AWS 비용관리 항목에서 AWS 프리티어 확인을 하면, 현재 내가 사용한 사용량을 볼 수 있음
>EC2에서 인스턴스 > 종료로 초기화
>EBS에서 볼륨을 모두 삭제하여 초기화 한다.
>이미지에서 AMI 를 확인한다
>보안그룹에서 default 제외하고 모두 삭제하여 초기화
	'My-All-Access-SG' 하나만 사용할것임.
	인바운드 : 모든 트래픽 허용, 소스는 anywhere ipv4
>네트워킹 및 콘텐츠 전송
	VPC항목 이동
	서브넷 탭 이동
>EC2 시작 스크립트를 생성함	
~~~~~~리눅스내용~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[root@server-1 ~]# echo "hello \n linux"
hello \n linux
[root@server-1 ~]# echo -e "hello \n linux"
hello 
 linux
>>-e는 \n로 하여금 문자가아니라 명령어임을 각인시켜준다. (escape)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#!/bin/bash
echo 'redhat' | sudo passwd --stdin root
sudo -s
yum install httpd firewall* vim bash-completion -y
systemctl enable --now httpd
systemctl enable --now firewalld
firewall-cmd --permanent --add-service=http
firewall-cmd --reload
echo "Web Server Name $(hostname -f)" >> /var/www/html/index.html
systemctl restart httpd
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
>인스턴스 구축실습 (3개)
이름 AWS-Server / 아마존리눅스ami
키페어  All-Machine-Key  유일하게 사용
서브넷 기본설정없음
보안그룹 > 기존 보안그룹선택 MY-All-Access-SG 
고급세부정보> 사용자데이터(optional)에 스크립트를 적어넣기
인스턴스 개수> 3개의 인스턴스 한번에 생성

이 과정이 순탄하게 되었다면 각각의 퍼블릭 ip로 도메인에 접속했을 때
Web Server Name ip-172-xx-xx-xx.ap-northeast-2.compute.internal
라는 문구가 나타나게 된다.

# AWS ELB(Elastic Load Balancer)와 Auto Scaling Group 실습

>Application Load Balancer (로드밸런싱) 
대시보드> '대상 그룹 ' 탭으로 이동
대상 그룹 생성 > 대상유형 '인스턴스' > 'Web-TG' 로 생성 , HTTP :80 (port) 
3개의 인스턴스를 택하고 , '아래에 보류 중인 것으로 포함'을 클릭해야 대상에 포함됨
>그룹 Web-TG 가 최종적으로 생성되었다.

'로드밸런서' 탭으로 이동 
>로드 밸런서 생성 클릭
웹서버의 교통정리를 위한 Application Load Balancer (ALB)를 생성하기 
로드밸런서 이름을 'Web-ALB' 로 설정
매핑- 2개이상의 서브넷을 지정해야함. 여기서 실패하게 된다.
>로드밸런서 생성을 위한인스턴스 시작( 2c 가용영역 생성)
동일하게 하고 고급세부정보에 스크립트를 넣고, 인스턴스 2개 생성
생성된 인스턴스 4, 5를 '아래에 보류중인것으로 포함' 후 보류중인 대상 등록

>로드밸런서 생성
Web-ALB 
ap-northeast-2a (apne2-az1)
ap-northeast-2c (apne2-az3)		가용영역 선택
>보안그룹 My-All-Access-SG
>리스너 및 라우팅 - 대상그룹 Web-TG로 추가
>로드밸런서가 생성되었다.
 
>여기서 중요한 것은 
Web-ALB-690483713.ap-northeast-2.elb.amazonaws.com 이라는 DNS이름 이다.
이를 복사해서 콘솔창옆 탭에서 입력을 하면 5가지 인스턴스에 할당된 5가지 IP가 랜덤하게 나타난다.(새로고침 시 변경됨)
>리스너 및 규칙, 네트워크 매핑, 모니터링 등을 통해서 웹서버를 관리할 수 있다.
>대상그룹 탭으로 들어가서 보면, Healthy 상태의 인스턴스들을 관찰할 수 있다.
 

>로드밸런서 삭제
로드밸런서 탭에서 로드밸런서 삭제를 실행
대상그룹 탭에서 해당 Web-TG를 삭제해서 완료할 수 있다.

> AWS Auto Scailing 
스케일링 이란 인스턴스 혹은 컴퓨팅 파워를 늘리는 것을 말하며 

>스케일 업 (Scale UP)
*cpu가 하나이고 memory 1기가인 인스턴스가 있다고 가정하자.
만일 인스턴스의 성능을 16배로 늘려야할 상황이 온다면, 말 그대로 16배 큰 인스턴스를 사용함으로서 성능을 올리는 것을 스케일 업이라고 한다. 하지만 이는 성능과 비용이 비례하지 않는다는 단점이 있다. 간단히 예를 들면 그래픽카드를 볼 수 있다.
 
 >스케일 아웃(Scale Out)
위의 물리적인 문제를 해결하는것이 바로 스케일 아웃 이다.
스케일 아웃은 규모를 늘리는 것이다.
따라서, 클라우드 환경에서는 Scale Out을 항상 염두하며 설계를 해야 한다.
수요에 따라 인스턴스를 덜 쓸 수도, 더 쓸 수도 있음으로서 유연성을 가질 수 있기 때문이다.

>스케일 인(Scale In)
scale out으로 늘린 인스턴스를 다시 줄이는 행위로 이해하면 된다.
오토 스케일링(Auto Scaling)은 바로 Scale Out을 자동화(Auto) 하기 위해 나온 서비스라고 보면 된다.

># 오토스케일링 실습
auto scaling 탭으로 먼저 이동하지 않는다.
>시작 템플릿 탭으로 먼저 이동 > 시작 템플릿 생성
' MY-Temp-1 ' , 오토스케일링 가이던스 체크
인스턴스유형과 키페어, 보안그룹 설정 후 탬플릿 생성

>오토스케일링 생성 
'MY-ASG-1' 로 그룹 이름 생성
시작 탬플릿 my-temp-1 선택
네트워크 가용영역을 하나 선택(2b) << 오류같음.실패
네트워크 가용영역을 2a or 2c로 선택 <<trouble shooting 성공 
>로드밸런싱을 같이 구성할 수 있다.
>'그룹크기 및 크기 조정 정책 구성'
원하는용량 3, 최소용량1, 최대용량 6으로 설정.
>대상 추적 크기 조정 정책
지표유형을 평균 cpu사용률로 선택. 대상값 60
>검토( summary) > 오토스케일링 그룹 생성
 

 2b(실패)
 2c(성공)
>인스턴스에 가서 확인을하면, 아까전의 3개의 인스턴스가 올라와있는 것을 확인가능하다.
 
amazon linux 연결해서 터미널에서 yum install stress -y 로 스트레스 서비스 설치
[root@ip-172-31-42-151 ec2-user]# stress -c 10 --time-out 600s 를 입력
인스턴스 갯수가 왔다갔다 3> 1 >6 까지도 가변하게 됨.   오늘 실습은 굉장히 재밌었다.
<<stress --cpu $(nproc) --timeout 600s >>  예제코드
########################################################################



