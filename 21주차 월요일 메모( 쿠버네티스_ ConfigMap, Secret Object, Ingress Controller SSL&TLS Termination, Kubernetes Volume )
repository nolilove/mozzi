21주차 화요일 메모 ( Kubernetes_10 ConfigMap, Secret Object, Ingress Controller SSL&TLS Termination, Kubernetes Volume  )


지난주에는 Ingress, NodePort방식구성,LoadBalancer방식구성,IngressClass 에 대해서 알아보았다.

# ConfigMap 컨피그맵
(1) # --from-file 옵션을 사용하여 ConfigMap 생성
(2) # Key, File을 지정하여 ConfigMap 생성
# Manifest File로 ConfigMap 정의하기
# ConfigMap 설정중 일부만 불러와 사용하기
# ConfigMap 볼륨 사용하기
# Secret Object 시크릿 
# 값을 지정해서 시크릿 생성하기
# 도커 레지스트리 인증정보 시크릿 생성하기
# TLS 키 및 인증서용 시크릿 생성
# Ingress Controller SSL/TLS Termination 구성 (HTTPS)
# Kubernetes Volume 쿠버네티스 볼륨


#복기

Ingress 인그레스
요청 패킷에 포함된 애플리케이션 데이터를 분석하여 애플리케이션에 전달하기 위한 Kubernetes Object

Ingress Controller 인그레스 컨트롤러
   Kubernetes Ingress Object를 처리하기 위한 Controller
 Ingress Object에 정의된 규칙에 따라 애플리케이션 트래픽을 다룸
 
Ingress Object 기본 구조 (매니페스트 파일)
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: INGRESS_NAME
spec:
  defaultBackend:
    service:
      name: SERVICE_NAME
      port:
        number: PORT
  rules:
  - host: ADDRESS
    http:
      paths:
      - path: PATH
        pathType: Prefix
        backend:
          service:
            name: SERVICE_NAME
            port:
              number: PORT

기본적으로 rules: 필드 아래에 내가 원하는 것들을 룰로써 정의해서 사용이 가능하다.
호스트필드는 주소/ http(s)라는 필드는 인그레스 컨트롤러가 다룰수있는 애플리케이션 프로토콜이 무엇인지 둘중에 선택 및 지정해주는 등의 정의가 가능함.
지난시간에는 http로 정의해서 사용하는 법을 알아봤다. / path는 경로의 타입을 지정하는 필드이고, 어느 서비스를 통해 이용할지 인그레스 오브젝트를 정의하는 공간임.



#복기실습

vagrant@kube-control1:~$ cd work/
vagrant@kube-control1:~/work$ mkdir 20240109
vagrant@kube-control1:~/work$ cd 20240109

1단계
레플리카셋/ 서비스/ 인그레스를 정의하기
vagrant@kube-control1:~/work/20240109$ vim example-rs-mpath1.yaml
apiVersion: apps/v1
kind: ReplicaSet
metadata:
  name: example-rs-mpath1
spec:
  replicas: 3
  selector:
    matchLabels:
      app: example-rs-mpath1
  template:
    metadata:
      labels:
        app: example-rs-mpath1
    spec:
      containers:
      - name: example
        image: devops2341/go-myweb:alpine
        ports:
        - containerPort: 8080
          protocol: TCP

vagrant@kube-control1:~/work/20240109$ vim example-rs-mpath2.yaml
apiVersion: apps/v1
kind: ReplicaSet
metadata:
  name: example-rs-mpath2
spec:
  replicas: 3
  selector:
    matchLabels:
      app: example-rs-mpath2
  template:
    metadata:
      labels:
        app: example-rs-mpath2
    spec:
      containers:
      - name: example
        image: devops2341/go-myweb:alpine
        ports:
        - containerPort: 8080
          protocol: TCP

레플리카셋 정의를 마쳤으면, 다음으로 서비스를 정의한다.
vagrant@kube-control1:~/work/20240109$ vim example-svc-mpath1.yaml
apiVersion: v1
kind: Service
metadata:
  name: example-svc-mpath1
spec:
  type: NodePort
  selector:
    app: example-rs-mpath1
  ports:
  - port: 80
    targetPort: 8080
    protocol: TCP
    
vagrant@kube-control1:~/work/20240109$ vim example-svc-mpath2.yaml
apiVersion: v1
kind: Service
metadata:
  name: example-svc-mpath2
spec:
  type: NodePort
  selector:
    app: example-rs-mpath2
  ports:
  - port: 80
    targetPort: 8080
    protocol: TCP
    
이제 인그레스 매니페스트를 정의해준다
vagrant@kube-control1:~/work/20240109$ vim example-ing-mpath.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: example-ing-mpath
spec:
  rules:
  - host: app.example.com
    http:
      paths:
      - path: /web1
        pathType: Prefix
        backend:
          service:
            name: example-svc-mpath1
            port:
              number: 80
       - path: /web2
         pathType: Prefix
         backend:
           service:
            name: example-svc-mpath2
            port:
              number: 80

2단계 
생성하기
vagrant@kube-control1:~/work/20240109$ kubectl create -f example-rs-mpath1.yaml -f example-rs-mpath2.yaml
replicaset.apps/example-rs-mpath1 created
replicaset.apps/example-rs-mpath2 created

vagrant@kube-control1:~/work/20240109$ kubectl create -f example-svc-mpath1.yaml -f example-svc-mpath2.yaml
service/example-svc-mpath1 created
service/example-svc-mpath2 created

vagrant@kube-control1:~/work/20240109$ kubectl create -f example-ing-mpath.yaml
ingress.networking.k8s.io/example-ing-mpath created


3단계
확인하기

노드확인
vagrant@kube-control1:~/work/20240109$ kubectl get nodes
NAME            STATUS   ROLES           AGE     VERSION
kube-control1   Ready    control-plane   5d20h   v1.27.9
kube-node1      Ready    <none>          5d20h   v1.27.9
kube-node2      Ready    <none>          5d20h   v1.27.9
kube-node3      Ready    <none>          5d20h   v1.27.9

인그레스 목록확인
vagrant@kube-control1:~/work/20240109$ kubectl get ingresses
NAME                CLASS   HOSTS                                 ADDRESS         PORTS   AGE
example-ing-mhost   nginx   web01.example.com,web02.example.com   192.168.56.21   80      16h
example-ing-mpath   nginx   app.example.com                       192.168.56.21   80      64s

인그레스 상세보기
vagrant@kube-control1:~/work/20240109$ kubectl describe ingress example-ing-mpath
Name:             example-ing-mpath
Labels:           <none>
Namespace:        default
Address:          192.168.56.21
Ingress Class:    nginx
Default backend:  <default>
Rules:
  Host             Path  Backends
  ----             ----  --------
  app.example.com
                   /web1   example-svc-mpath1:80 (192.168.119.156:8080,192.168.233.224:8080,192.168.9.95:8080)
                   /web2   example-svc-mpath2:80 (192.168.119.157:8080,192.168.233.225:8080,192.168.9.96:8080)
Annotations:       <none>
Events:
  Type    Reason  Age                    From                      Message
  ----    ------  ----                   ----                      -------
  Normal  Sync    2m24s (x2 over 2m36s)  nginx-ingress-controller  Scheduled for sync

웹으로 접근해서 확인하기
web01에 접근
vagrant@kube-control1:~/work/20240109$ curl --resolve app.example.com:80:192.168.56.200 http://app.example.com/web1
Hello World!
example-rs-mpath1-4mkpg

web02에 접근
vagrant@kube-control1:~/work/20240109$ curl --resolve app.example.com:80:192.168.56.200 http://app.example.com/w
eb2
Hello World!
example-rs-mpath2-dnk25

결과가 잘 도출됐다.


# ConfigMap 컨피그맵
p.256.  CH.10

설명: 값 또는 데이터(파일 등) 을 저장하기 위한 쿠버네티스 오브젝트.
Kubernetes Volume Object종류 중 하나에 해당.

#명령어를 사용하여 ConfigMap Object 생성하는방법
$ kubectl create configmap  CONFIGMAP_NAME  [OPTION]...

(옵션) 
 --from-literal
       KEY=VALUE를 문자열로 지정
   --from-file
       Key, Value가 있는 파일 지정
       Key를 별도로 지정하지 않는 경우 파일이름이 Key로 지정됨

--from-file 옵션을 사용하여 ConfigMap 생성
$ kubectl create configmap  CONFIGMAP_NAME  --from-literal=KEY=VALUE
$ kubectl create configmap config1 --from-literal=key1=value1




#실습
vagrant@kube-control1:~/work/20240109$ kubectl get configmaps
NAME               DATA   AGE
kube-root-ca.crt   1      5d20h


컨피그맵생성하기
vagrant@kube-control1:~/work/20240109$ kubectl create configmap config1 --from-literal=key1=value1
configmap/config1 created

컨피그맵 목록보기
vagrant@kube-control1:~/work/20240109$ kubectl get configmaps
NAME               DATA   AGE
config1            1      17s
kube-root-ca.crt   1      5d20h

컨피그맵 상세확인
vagrant@kube-control1:~/work/20240109$ kubectl describe configmaps config1
Name:         config1
Namespace:    default
Labels:       <none>
Annotations:  <none>

Data
====
key1:
----
value1

BinaryData
====

Events:  <none>



#실습 >
(1)	# --from-file 옵션을 사용하여 ConfigMap 생성
$ kubectl create configmap  CONFIGMAP_NAME  --from-file=SOURCE[KEY]

vagrant@kube-control1:~/work/20240109$ echo value2> key2
vagrant@kube-control1:~/work/20240109$ ls -l
-rw-rw-r-- 1 vagrant vagrant   7 Jan  9 01:46 key2

vagrant@kube-control1:~/work/20240109$ kubectl create configmap config2 --from-file=key2
configmap/config2 created

    vagrant@kube-control1:~/work/20240109$ kubectl get configmaps
NAME               DATA   AGE
config1            1      9m29s
config2            1      39s
kube-root-ca.crt   1      5d21h

vagrant@kube-control1:~/work/20240109$ kubectl describe configmaps config2
Name:         config2
Namespace:    default
Labels:       <none>
Annotations:  <none>

Data
====
key2:
----
value2


BinaryData
====

Events:  <none>

(2) # Key, File을 지정하여 ConfigMap 생성
$ kubectl create configmap  CONFIGMAP_NAME  --from-file=SOURCE=[KEY]

vagrant@kube-control1:~/work/20240109$ echo "value3" > key3.conf
vagrant@kube-control1:~/work/20240109$ ls
example-ing-mpath.yaml  example-rs-mpath2.yaml   example-svc-mpath2.yaml  key3.conf
example-rs-mpath1.yaml  example-svc-mpath1.yaml  key2
vagrant@kube-control1:~/work/20240109$ cat key3.conf
value3
vagrant@kube-control1:~/work/20240109$ kubectl create configmap config3 --from-file=key3=key3.conf
configmap/config3 created

vagrant@kube-control1:~/work/20240109$ kubectl describe configmaps config3
        Name:         config3
Namespace:    default
Labels:       <none>
Annotations:  <none>

Data
====
key3:
----
value3


BinaryData
====

Events:  <none>


# Manifest File로 ConfigMap 정의하기

$ vim config4.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: config4
data:
  key4: value4

생성
vagrant@kube-control1:~/work/20240109$ kubectl create -f config4.yaml
configmap/config4 created

확인하기
vagrant@kube-control1:~/work/20240109$ kubectl describe configmaps config4
Name:         config4
Namespace:    default
Labels:       <none>
Annotations:  <none>

Data
====
key4:
----
value4

BinaryData
====

Events:  <none>


# configmap사용하기 

데이터를 환경변수로 사용하기. 책내용으로는 p.256 

1단계
컨피그맵전용 디렉터리 하나를 생성
vagrant@kube-control1:~/work/20240109$ mkdir configmap

컨피그맵 설정탬플릿 하나 생성
vagrant@kube-control1:~/work/20240109$ vim configmap/config-dev.yaml

apiVersion: v1
kind: ConfigMap
metadata:
  name: config-dev
  namespace: default
data:
  DB_URL: localhost
  DB_USER: myuser
  DB_PASS: mypass
  DEBUG_INFO: debug


2단계 
쿠버네티스 클러스터 안에 적용하기

vagrant@kube-control1:~/work/20240109$ cd configmap/
vagrant@kube-control1:~/work/20240109/configmap$ ls
config-dev.yaml

vagrant@kube-control1:~/work/20240109/configmap$ kubectl apply -f config-dev.yaml
configmap/config-dev created
$ kubectl create -f config-dev.yaml도 된다.

3단계
설정내용이 적용되었는지 확인

vagrant@kube-control1:~/work/20240109/configmap$ kubectl describe configmap config-dev
Name:         config-dev
Namespace:    default
Labels:       <none>
Annotations:  <none>

Data
====
DB_PASS:
----
mypass
DB_URL:
----
localhost
DB_USER:
----
myuser
DEBUG_INFO:
----
debug

BinaryData
====

Events:  <none>

>>데이터 항목의 출력결과가 템플릿 설정과 일치하면 정상적으로 적용된 것이다.


# ConfigMap 설정중 일부만 불러와 사용하기

$ vim deployment-config01.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: configapp
  labels:
    app: configapp
spec:
  replicas: 1
  selector:
    matchLabels:
      app: configapp
  template:
    metadata:
      labels:
        app: configapp
    spec:
      containers:
      - name: testapp
        image: arisu1000/simple-container-app:latest
        ports:
        - containerPort: 8080
        env:
        - name: DEBUG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: config-dev
              key: DEBUG_INFO


디플로이먼트 생성하기
vagrant@kube-control1:~/work/20240109$ kubectl create -f deployment-config01.yaml
deployment.apps/configapp created

디플로이먼트 확인
vagrant@kube-control1:~/work/20240109$ kubectl get deployments.apps
NAME        READY   UP-TO-DATE   AVAILABLE   AGE
configapp   1/1     1            1           11s

상세정보 확인.
vagrant@kube-control1:~/work/20240109$ kubectl describe deployments.apps  configapp
 
Environment:
      DEBUG_LEVEL:  <set to the key 'DEBUG_INFO' of config map 'config-dev'>  Optional: false
    Mounts:         <none>

vagrant@kube-control1:~/work/20240109$ kubectl get pods
NAME                        READY   STATUS    RESTARTS      AGE
configapp-654795544-q75c5   1/1     Running   0             67s


플레이북을 실행해서 본쉘> 환경변수 조회해보기.
vagrant@kube-control1:~/work/20240109$ kubectl exec -it configapp-654795544-q75c5 -- /bin/sh
~ # env
 
DEBUG_LEVEL=debug



# ConfigMap 볼륨 사용하기

1단계

우선 conf 디렉터리를 하나 만든다.
vagrant@kube-control1:~/work/20240109$ mkdir conf
vagrant@kube-control1:~/work/20240109$ vim conf/nginx-gzip.conf

server {
        listen         80;
        server_name    app.example.com;
        gzip    on;
        gzip_types  text/plain  application/xml;
        location        / {
                root    /usr/share/nginx/html;
                index   index.html;

        }

}

>>nginx서버 설정을 담고있는 내용을 정의한것이다.
 
1.	listen 80;: Nginx가 80번 포트에서 들어오는 HTTP 요청을 수신하도록 구성되어 있습니다. 80번 포트는 일반적으로 HTTP 트래픽을 처리하는 데 사용됩니다.
2.	server_name app.example.com;: 이 서버 블록은 app.example.com 도메인으로 들어오는 요청을 처리합니다. Nginx는 이 도메인에 대한 요청만을 이 서버 블록으로 라우팅합니다.
3.	gzip on;: 이 지시문은 Nginx가 전송되는 콘텐츠를 gzip으로 압축할 것임을 나타냅니다. 이렇게 함으로써 전송 데이터의 양을 줄이고 웹 페이지의 로딩 속도를 향상시킬 수 있습니다.
4.	gzip_types text/plain application/xml;: gzip으로 압축될 콘텐츠 유형을 지정합니다. 여기서는 텍스트 파일과 XML 파일을 gzip으로 압축하도록 구성되어 있습니다.
5.	location / {...}: 이 부분은 특정 URL 경로 ("/")에 대한 처리를 정의합니다. 여기서는 해당 경로에 들어오는 요청에 대해 다음과 같이 처리합니다:
•	root /usr/share/nginx/html;: 해당 경로의 파일들을 찾을 디렉토리를 지정합니다.
•	index index.html;: 만약 요청이 해당 경로의 디렉토리이면, 기본적으로 index.html 파일을 찾아 클라이언트에게 전달합니다.


2단계

생성해주자
vagrant@kube-control1:~/work/20240109$ kubectl create configmap nginx-gzip-config --from-file=conf/nginx-gzip
.conf
configmap/nginx-gzip-config created


vagrant@kube-control1:~/work/20240109$ kubectl get configmaps
nginx-gzip-config   1      91s

상세정보확인
vagrant@kube-control1:~/work/20240109$ kubectl describe configmaps nginx-gzip-config
Name:         nginx-gzip-config
Namespace:    default
Labels:       <none>
Annotations:  <none>

Data
====
nginx-gzip.conf:
----
server {
        listen         80;
  server_name    app.example.com;
  gzip   on;
  gzip_types  text/plain  application/xml;
  location  / {
            root   /usr/share/nginx/html;
            index  index.html;

  }

}
    
BinaryData
====

Events:  <none>

3단계 

파드를 하나 생성해주자.
$ vim nginx-pod-compress.yaml
vagrant@kube-control1:~/work/20240109$ vim nginx-pod-compress.yaml

apiVersion: v1
kind: Pod
metadata:
  name: nginx-pod-compress
spec:
  containers:
  - name: nginx-compress
    image: nginx:latest
    volumeMounts:
    - name: nginx-compress-config
      mountPath: /etc/nginx/conf.d/
    ports:
    - containerPort: 80
      protocol: TCP
    volumes:
    - name: nginx-compress-config
      configMap:
        name: nginx-gzip-config

>>코드설명 : 데이터를 압축해서 보내서, 대역폭을 줄이고자하는 의도를 가진 파드이다.
1.	Nginx 웹 서버 실행: 이 파드는 Nginx의 최신 버전을 사용하여 웹 서버를 실행
Nginx는 가벼우면서도 성능이 우수한 웹 서버 및 리버스 프록시로 사용
2.	ConfigMap을 이용한 동적 설정: ConfigMap인 "nginx-gzip-config"를 사용하여 Nginx의 구성을 제공한다. 
특히, "/etc/nginx/conf.d/" 경로에 해당 ConfigMap을 마운트하여 Nginx 설정을 동적으로 변경할 수 있다. 이를 통해 서버의 동작을 필요에 따라 조정할 수 있다.
3.	gzip 압축 활성화: ConfigMap에 정의된 설정을 통해 Nginx는 전송되는 콘텐츠를 gzip으로 압축하여 전송한다. 
이는 네트워크 대역폭을 절약하고 웹 페이지 로딩 속도를 향상시키는 데 도움이 된다.
4.	포트 80에서 서비스 제공: 이 파드는 80번 포트에서 웹 서비스를 제공한다. 따라서 외부에서 이 파드에 접근하려면 해당 포트로의 트래픽을 허용해야 한다.


실행
vagrant@kube-control1:~/work/20240109$ kubectl create -f nginx-pod-compress.yaml
pod/nginx-pod-compress created

-o wide옵션으로 파드확인
vagrant@kube-control1:~/work/20240109$ kubectl get pods -o wide
NAME                        READY   STATUS    RESTARTS      AGE    IP                NODE         NOMINATED NODE   READINESS GATES
nginx-pod-compress          1/1     Running   0             24s    192.168.233.226   kube-node2   <none>           <none>

웹 접근해서 확인
$ curl http://POD_IP/
vagrant@kube-control1:~/work/20240109$ curl http://192.168.233.226/
정상적으로 뜬다.

HTTP요청을 보내되 , -I옵션으로 응답본문은 없고 헤더만 출력하도록 조회해본다.
$ curl -H "Accept-encoding: gzip" -I http://192.168.233.226/
HTTP/1.1 200 OK
Server: nginx/1.25.3
Date: Tue, 09 Jan 2024 03:07:50 GMT
Content-Type: text/html
Last-Modified: Tue, 24 Oct 2023 13:46:47 GMT
Connection: keep-alive
ETag: W/"6537cac7-267"
Content-Encoding: gzip

HTTP/1.1 200 OK: HTTP 응답 코드 200은 "성공"을 의미합니다. 요청이 성공적으로 처리되었음을 나타냅니다.
Server: nginx/1.25.3: 서버 응답 헤더에는 Nginx 웹 서버의 버전이 나와 있습니다. 여기서는 "nginx/1.25.3"입니다.
Content-Type: text/html: 응답 콘텐츠의 형식은 HTML임을 나타냅니다.
Content-Encoding: gzip: 서버가 응답 본문을 gzip으로 압축했음을 나타냅니다.

-H "Accept-encoding: gzip": 이 헤더는 서버에게 클라이언트가 gzip으로 압축된 콘텐츠를 수락할 수 있음을 알려줍니다.
(원하는 http헤더에 어떤 값을 추가할때 사용, 예제에서는 Accept-encoding헤더에 gzip값을 추가하여 gzip압축된 콘텐츠 수용을 가능하게하는 역할)
-I: 헤더만 출력하는 옵션입니다.


# Secret Object 시크릿 
p.268   CH11.1
    
컨피그맵과 유사한, 데이터를 Key-Value형태로 저장하기위한 쿠버네티스 오브젝트이다.
컨피그맵과의 차이라고 한다면 password라던가 암호화된 키, 인증서 등을 저장할때 사용하는것이 바로 시크릿 오브젝트에 해당.
시크릿은 데이터가 저장될 때 Base64 Encoding이 된 채로 데이터가 저장됨.

*참고 
Kubernetes 시크릿(Secret) 오브젝트에서 "Opaque"는 시크릿의 유형을 나타내는 특별한 유형 중 하나입니다.
즉, "Opaque" 시크릿은 키-값 쌍이 아니라 임의의 데이터를 저장할 수 있는 일반적인 바이너리 데이터를 나타냅니다.
"Opaque" 시크릿은 데이터의 구조나 형식에 대한 Kubernetes에게 알려진 정보가 없으며, 그냥 바이너리로 저장된 데이터를 의미합니다.
일반적으로 TLS(Transport Layer Security) 인증서나 다른 인증 정보와 같은 바이너리 데이터를 저장할 때 사용될 수 있습니다.

-Secret 저장 데이터 종류
   generic (= Opaque ) :  임의의 데이터
   docker-registry (= kubernetes.io/dockerconfigjson ) : Docker Container Registry 인증 정보
   tls (= kubernetes.io/tls ) : TLS 키 및 인증서
  
   service-account-token (= kubernetes.io/service-account-token ) : 서비스 계정 토큰

실습은 시크릿오브젝트를 1. 명령/ 2. 템플릿으로 만드는 방법을 해본다.

Secret 생성 명령어 문법
$ kubectl create secret  SECRET_TYPE  SECRET_NAME  [OPTION]...

일반 시크릿 (Generic Secret)생성
 $ kubectl create secret generic  SECRET_NAME  [OPTION]...
   --from-literal
       KEY=VALUE를 문자열로 지정
   --from-file
       Key, Value가 있는 파일 지정
       Key를 별도로 지정하지 않는 경우 파일이름이 Key로 지정됨
   
값을 지정하여 일반 시크릿 생성
$ kubectl create secret generic  SECRET_NAME  --from-literal=KEY=VALUE

값이 저장된 파일을 이용하여 일반 시크릿 생성
$ kubectl create secret generic  SECRET_NAME  --from-file=[KEY=]SOURCE

#간단실습
vagrant@kube-control1:~/work/20240109$ kubectl create secret generic secret1 --from-literal=key1=value1
secret/secret1 created
vagrant@kube-control1:~/work/20240109$ kubectl get secrets
NAME      TYPE     DATA   AGE
secret1   Opaque   1      6s
vagrant@kube-control1:~/work/20240109$ kubectl describe secrets secret1
Name:         secret1
Namespace:    default
Labels:       <none>
Annotations:  <none>

Type:  Opaque

Data
====
key1:  6 bytes
>> 실제 데이터는 보이지 않는다. 데이터를 보려면 base64인코딩된 내용을 디코드해야한다.
vagrant@kube-control1:~/work/20240109$ kubectl get secrets secret1 -o yaml
apiVersion: v1
data:
  key1: dmFsdWUx
kind: Secret
metadata:
  creationTimestamp: "2024-01-09T03:40:46Z"
  name: secret1
  namespace: default
  resourceVersion: "161445"
  uid: 725b68d2-968a-42db-8293-3ca56bfae1e0
type: Opaque
>>입력했던 데이터가 암호화되어있다. 이것을 base64 해독기로 돌리면 value1가 뜬다.
 


# 값을 지정해서 시크릿 생성하기

-값을 지정하여 일반 시크릿 생성
$ kubectl create secret generic  SECRET_NAME  --from-literal=KEY=VALUE

-값이 저장된 파일을 이용하여 일반 시크릿 생성
$ kubectl create secret generic  SECRET_NAME  --from-file=[KEY=]SOURCE

    
#실습
단순 파일을 하나 만든다.
vagrant@kube-control1:~/work/20240109$ echo "secret" > secret-key2
vagrant@kube-control1:~/work/20240109$ ls
secret-key2

vagrant@kube-control1:~/work/20240109$ kubectl create secret generic secret2 --from-file=mozzik=secret-key2
secret/secret2 created
>>따로 키의 파일명을 지정하고싶다면(mozzik)중간에 =(원하는키명)을 추가해야한다.

vagrant@kube-control1:~/work/20240109$ kubectl get secrets
NAME      TYPE     DATA   AGE
secret1   Opaque   1      99m
secret2   Opaque   1      47s

키이름 확인하기
vagrant@kube-control1:~/work/20240109$ kubectl describe secrets secret2
Name:         secret2
Namespace:    default
Labels:       <none>
Annotations:  <none>

Type:  Opaque

Data
====
mozzik:  7 bytes


# 도커 레지스트리 인증정보 시크릿 생성하기

Docker Registry 인증정보 시크릿 생성
$ kubectl create secret docker-registry  SECRET_NAME  \
    --docker-username=USER  --docker-password=PASSWORD \
    --docker-email=EMAIL  [--docker-server=REGISTRY_ADDRESS]

# TLS 키 및 인증서용 시크릿 생성

$ kubectl create secret tls  SECRET_NAME --cert=CERT_FILE  --key-file=KEY_FILE   
>>인증서나 TLS키를 먼저 받아야 한다는것을 유의하자.


#TLS 시크릿 실습(nginx Webserver HTTPS 구성하기
1단계
프라이빗키를 생성한다. 우선 디렉터리를 만듦.
vagrant@kube-control1:~/work/20240109$ mkdir nginx-tls

SSL/TLS Key 생성
vagrant@kube-control1:~/work/20240109$ openssl genrsa -out nginx-tls/nginx-tls.key 2048

SSL/TLS 인증서 생성
vagrant@kube-control1:~/work/20240109$ openssl req -new -x509 -key nginx-tls/nginx-tls.key \
  -out nginx-tls/nginx-tls.crt \
  -days 365 -subj /CN=www.example.com

==vagrant@kube-control1:~/work/20240109$ openssl req -new -x509 -key nginx-tls/nginx-tls.key -out nginx-tls/nginx-tls.crt -days 365 -subj /CN=www.example.com

TLS 시크릿 생성
vagrant@kube-control1:~/work/20240109$ kubectl create secret tls nginx-tls-secret \
  --cert=nginx-tls/nginx-tls.crt \
  --key=nginx-tls/nginx-tls.key
secret/nginx-tls-secret created

확인
vagrant@kube-control1:~/work/20240109$ kubectl get secrets
NAME               TYPE                DATA   AGE
nginx-tls-secret   kubernetes.io/tls   2      43s

vagrant@kube-control1:~/work/20240109$ kubectl describe secrets nginx-tls-secret
Name:         nginx-tls-secret
Namespace:    default
Labels:       <none>
Annotations:  <none>

Type:  kubernetes.io/tls

Data
====
tls.crt:  1131 bytes
tls.key:  1704 bytes

이어서,  conf파일작성
 
vagrant@kube-control1:~/work/20240109$ vim conf/nginx-tls.conf

server {
        listen 80;
        listen 443   tls;
server_name             www.example.com;
ssl_certificate         /etc/nginx/ssl/tls.crt;
ssl_certificate_key     /etc/nginx/ssl/tls.key;
ssl_protocols           TLSv1.2   TLSv1.3;
ssl_ciphers             HIGH:!aNULL:!MD5;
location        /  {
                root  /usr/share/nginx/html;
                index   index.html;

}

}


 

컨피그맵을 하나 생성할 것이다.
vagrant@kube-control1:~/work/20240109$ kubectl create configmap nginx-tls-config --from-file=conf/nginx-tls.conf
configmap/nginx-tls-config created

확인해주자
vagrant@kube-control1:~/work/20240109$ kubectl get configmaps
NAME                DATA   AGE
config-dev          4      3h16m
config1             1      4h6m
config2             1      3h57m
config3             1      3h51m
config4             1      3h44m
kube-root-ca.crt    1      6d
nginx-gzip-config   1      175m
nginx-tls-config    1      13s

vagrant@kube-control1:~/work/20240109$ kubectl describe configmaps nginx-tls-config
Name:         nginx-tls-config
Namespace:    default
Labels:       <none>
Annotations:  <none>

Data
====
nginx-tls.conf:
----
server {
                      listen 80;
                      listen 443   tls;
        server_name                         www.example.com;
                      ssl_certificate       /etc/nginx/ssl/tls.crt;
                      ssl_certificate_key   /etc/nginx/ssl/tls.key;
                      ssl_protocols           TLSv1.2   TLSv1.3;
                      ssl_ciphers             HIGH:!aNULL:!MD5;
                      location              / {
                                            root    /usr/share/nginx/html;
                                            index   index.html;

  }

}
    
BinaryData
====
Events:  <none>

#위 실습을 기반으로 웹서버 정의하기_ 파드오브젝트
vagrant@kube-control1:~/work/20240109$ vim nginx-pod-https.yaml
apiVersion: v1
kind: Pod
metadata:
  name: nginx-pod-https
spec:
  containers:
  - name: nginx-https
    image: nginx:latest
    volumeMounts:
    - name: nginx-tls-config
      mountPath: /etc/nginx/conf.d/
    - name: https-cert
      mountPath: /etc/nginx/ssl/
      readOnly: true
    ports:
    - containerPort: 80
      protocol: TCP
    - containerPort: 443
      protocol: TCP
  volumes:
  - name: nginx-tls-config
    configMap:
      name: nginx-tls-config
  - name: https-cert
    secret:
      secretName: nginx-tls-secret

파드생성
vagrant@kube-control1:~/work/20240109$ kubectl create -f nginx-pod-https.yaml
pod/nginx-pod-https created

파드 조회하기 -o wide옵션
vagrant@kube-control1:~/work/20240109$ kubectl get pod -o wide
NAME                        READY   STATUS    RESTARTS      AGE     IP                NODE         NOMINATED NODE   READINESS GATES
configapp-654795544-q75c5   1/1     Running   0             3h19m   192.168.119.158   kube-node3   <none>           <none>


안되면 다시하라
vagrant@kube-control1:~/work/20240109/nginx-tls$ rm nginx-tls.crt
vagrant@kube-control1:~/work/20240109/nginx-tls$ rm nginx-tls.key
vagrant@kube-control1:~/work/20240109/nginx-tls$ cd ..
vagrant@kube-control1:~/work/20240109$ kubectl delete configmaps nginx-tls-config
configmap "nginx-tls-config" deleted
vagrant@kube-control1:~/work/20240109$ kubectl delete pod nginx-pod-https
pod "nginx-pod-https" deleted


$ curl --resolve www.example.com:443:192.168.119.155 -k -v https://www.example.com/
* Added www.example.com:443:192.168.119.155 to DNS cache
* Hostname www.example.com was found in DNS cache
*   Trying 192.168.119.155:443...
* Connected to www.example.com (192.168.119.155) port 443 (#0)
* ALPN, offering h2
* ALPN, offering http/1.1
* TLSv1.0 (OUT), TLS header, Certificate Status (22):
* TLSv1.3 (OUT), TLS handshake, Client hello (1):
* TLSv1.2 (IN), TLS header, Certificate Status (22):
* TLSv1.3 (IN), TLS handshake, Server hello (2):
* TLSv1.2 (IN), TLS header, Finished (20):
* TLSv1.2 (IN), TLS header, Supplemental data (23):
* TLSv1.3 (IN), TLS handshake, Encrypted Extensions (8):
* TLSv1.2 (IN), TLS header, Supplemental data (23):
* TLSv1.3 (IN), TLS handshake, Certificate (11):
* TLSv1.2 (IN), TLS header, Supplemental data (23):
* TLSv1.3 (IN), TLS handshake, CERT verify (15):
* TLSv1.2 (IN), TLS header, Supplemental data (23):
* TLSv1.3 (IN), TLS handshake, Finished (20):
* TLSv1.2 (OUT), TLS header, Finished (20):
* TLSv1.3 (OUT), TLS change cipher, Change cipher spec (1):
* TLSv1.2 (OUT), TLS header, Supplemental data (23):
* TLSv1.3 (OUT), TLS handshake, Finished (20):
* SSL connection using TLSv1.3 / TLS_AES_256_GCM_SHA384
* ALPN, server accepted to use http/1.1
* Server certificate:
*  subject: CN=www.example.com
*  start date: Jan  9 05:32:38 2024 GMT
*  expire date: Jan  8 05:32:38 2025 GMT
*  issuer: CN=www.example.com
*  SSL certificate verify result: self-signed certificate (18), continuing anyway.
* TLSv1.2 (OUT), TLS header, Supplemental data (23):
> GET / HTTP/1.1
> Host: www.example.com
> User-Agent: curl/7.81.0
> Accept: */*
>
* TLSv1.2 (IN), TLS header, Supplemental data (23):
* TLSv1.3 (IN), TLS handshake, Newsession Ticket (4):
* TLSv1.2 (IN), TLS header, Supplemental data (23):
* TLSv1.3 (IN), TLS handshake, Newsession Ticket (4):
* old SSL session ID is stale, removing
* TLSv1.2 (IN), TLS header, Supplemental data (23):
* Mark bundle as not supporting multiuse
< HTTP/1.1 200 OK
< Server: nginx/1.25.3
< Date: Tue, 09 Jan 2024 06:01:58 GMT
< Content-Type: text/html
< Content-Length: 615
< Last-Modified: Tue, 24 Oct 2023 13:46:47 GMT
< Connection: keep-alive
< ETag: "6537cac7-267"
< Accept-Ranges: bytes
<
<!DOCTYPE html>
<html>
<head>
<title>Welcome to nginx!</title>
<style>
html { color-scheme: light dark; }
body { width: 35em; margin: 0 auto;
font-family: Tahoma, Verdana, Arial, sans-serif; }
</style>
</head>
<body>
<h1>Welcome to nginx!</h1>
<p>If you see this page, the nginx web server is successfully installed and
working. Further configuration is required.</p>

<p>For online documentation and support please refer to
<a href="http://nginx.org/">nginx.org</a>.<br/>
Commercial support is available at
<a href="http://nginx.com/">nginx.com</a>.</p>

<p><em>Thank you for using nginx.</em></p>
</body>
</html>
* Connection #0 to host www.example.com left intact



# Ingress Controller SSL/TLS Termination 구성 (HTTPS)

실습 전 정리 (이전 서비스 제거)
$ kubectl delete deployments configapp

$ kubectl delete replicasets example-rs example-rs-mhost1 example-rs-mhost2 example-rs-mpath1 example-rs-mpath2

$  kubectl delete services example-svc-mhost1 example-svc-mhost2 example-svc-mpath1 example-svc-mpath2 example-svc-nodeport

$ kubectl delete ingresses example-ing example-ing-mhost example-ing-mpath

~~~

1단계
TLS 키 생성하기
우선 디렉터리생성
vagrant@kube-control1:~/work/20240109$ mkdir ingress-tls
키 생성
vagrant@kube-control1:~/work/20240109$ openssl genrsa -out ingress-tls/ingress-tls.key 2048

TLS 인증서 생성하기
바로이어서 인증서를 생성한다.
vagrant@kube-control1:~/work/20240109$ openssl req -new -x509 -key ingress-tls/ingress-tls.key \
> -out ingress-tls/ingress-tls.crt \
> -days 365 -subj /CN=www.example.com

다음단계로 시크릿 생성하기.
vagrant@kube-control1:~/work/20240109$ kubectl create secret tls ingress-tls-secret \
> --key=ingress-tls/ingress-tls.key \
> --cert=ingress-tls/ingress-tls.crt
secret/ingress-tls-secret created

2단계
그뒤에 레플리카셋과 서비스오브젝트, 그리고 인그레스를 생성한다.
$ vim example-rs.yaml
apiVersion: apps/v1
kind: ReplicaSet
metadata:
  name: example-rs
spec:
  replicas: 3
  selector:
    matchLabels:
      app: example-rs
  template:
    metadata:
      labels:
        app: example-rs
    spec:
      containers:
      - name: example
        image: devops2341/go-myweb:alpine
        ports:
        - containerPort: 8080
          protocol: TCP


$ vim example-svc-nodeport.yaml
apiVersion: v1
kind: Service
metadata:
  name: example-svc-nodeport
spec:
  type: NodePort
  selector:
    app: example-rs
  ports:
  - port: 80
    targetPort: 8080


$ vim example-ing-tls-termination.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: example-ing-tls-termination
spec:
  tls:
   -hosts:
    - www.example.com
    secretName: ingress-tls-secret
  rules:
  - host: www.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: example-svc-nodeport
            port:
              number: 80


이제 이 세개를 생성해준다.
vagrant@kube-control1:~/work/20240109$ kubectl create -f example-rs.yaml
replicaset.apps/example-rs created
vagrant@kube-control1:~/work/20240109$ kubectl create -f example-svc-nodeport.yaml
service/example-svc-nodeport created

인그레스에서
Error from server (BadRequest): error when creating "example-ing-tls-termination.yaml": Ingress in version "v1" cannot be handled as a Ingress: json: cannot unmarshal object into Go struct field IngressSpec.spec.tls of type []v1.IngressTLS이런오류가 나왔음.

(tls필드에서 host앞에 -를 붙이고 해결)
vagrant@kube-control1:~/work/20240109$ kubectl create -f example-ing-tls-termination.yaml
ingress.networking.k8s.io/example-ing-tls-termination created


3단계
인그레스 확인하기
vagrant@kube-control1:~/work/20240109$ kubectl get ingress
NAME                          CLASS   HOSTS             ADDRESS         PORTS     AGE
example-ing-tls-termination   nginx   www.example.com   192.168.56.21   80, 443   59s
vagrant@kube-control1:~/work/20240109$ kubectl describe ingresses example-ing-tls-termination
Name:             example-ing-tls-termination
Labels:           <none>
Namespace:        default
Address:          192.168.56.21
Ingress Class:    nginx
Default backend:  <default>
TLS:
  ingress-tls-secret terminates www.example.com
Rules:
  Host             Path  Backends
  ----             ----  --------
  www.example.com
                   /   example-svc-nodeport:80 (192.168.119.159:8080,192.168.233.232:8080,192.168.9.97:8080)
Annotations:       <none>
Events:
  Type    Reason  Age                From                      Message
  ----    ------  ----               ----                      -------
  Normal  Sync    51s (x2 over 79s)  nginx-ingress-controller  Scheduled for sync


직접 웹으로 접근해본다.
$ curl --resolve www.example.com:443:192.168.56.200 -k -v http://www.example.com/
* Added www.example.com:443:192.168.56.200 to DNS cache
*   Trying 93.184.216.34:80...
* Connected to www.example.com (93.184.216.34) port 80 (#0)
> GET / HTTP/1.1
> Host: www.example.com
> User-Agent: curl/7.81.0
> Accept: */*
>
* Mark bundle as not supporting multiuse
< HTTP/1.1 200 OK
< Accept-Ranges: bytes
< Age: 355193
< Cache-Control: max-age=604800
< Content-Type: text/html; charset=UTF-8
< Date: Tue, 09 Jan 2024 07:07:16 GMT
< Etag: "3147526947"
< Expires: Tue, 16 Jan 2024 07:07:16 GMT
< Last-Modified: Thu, 17 Oct 2019 07:18:26 GMT
< Server: ECS (nyb/1D1E)
< Vary: Accept-Encoding
< X-Cache: HIT
< Content-Length: 1256
<
<!doctype html>
<html>
<head>
    <title>Example Domain</title>

    <meta charset="utf-8" />
    <meta http-equiv="Content-type" content="text/html; charset=utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <style type="text/css">
    body {
        background-color: #f0f0f2;
        margin: 0;
        padding: 0;
        font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", "Open Sans", "Helvetica Neue", Helvetica, Arial, sans-serif;

    }
    div {
        width: 600px;
        margin: 5em auto;
        padding: 2em;
        background-color: #fdfdff;
        border-radius: 0.5em;
        box-shadow: 2px 3px 7px 2px rgba(0,0,0,0.02);
    }
    a:link, a:visited {
        color: #38488f;
        text-decoration: none;
    }
    @media (max-width: 700px) {
        div {
            margin: 0 auto;
            width: auto;
        }
    }
    </style>
</head>

<body>
<div>
    <h1>Example Domain</h1>
    <p>This domain is for use in illustrative examples in documents. You may use this
    domain in literature without prior coordination or asking for permission.</p>
    <p><a href="https://www.iana.org/domains/example">More information...</a></p>
</div>
</body>
</html>
* Connection #0 to host www.example.com left intact
>>웹브라우저로 직접 들어가기위해서는 /etc/hosts에서 바꾸거나, 윈도우즈cmd로 notepad.exe> hosts파일을 찾아서 아이피와 도메인을 추가해준다음에 접근해주면된다.
>>HTTPS버전을 끝마쳤다.



# Kubernetes Volume 쿠버네티스 볼륨
p.328   CH 14.1 

쿠버네티스에서 컨테이너는 기본적으로 상태가 없는(stateless) 앱컨테이너를 사용한다. 상태가 없다 함은 컨테이너에 문제가 있거나,
장애가 발생해서 컨테이너를 새로실행했을 때 다른 노드로 자유롭게 옮길 수 있다는 뜻이다. 앱의 특성에 따라서 컨테이너에 문제가 생기더라도
데이터를 보존해야 할 때가 있다. 이런 상황에서 볼륨을 사용하게 됨.

Volume 종류
  hostPath : Kubernetes node의 디렉터리를 파드에 공유
  emptyDir : 파드 실행시 빈 디렉터리이며 파드 종료시 데이터 삭제
                    파드 내의 컨테이너 끼리 데이터 
  PVC( PersistentVolumeClaim ) : 파드와 별개의 생명 주기를 가지는 볼륨으로 Kubernetes Cluster 외부의 스토리지를 사용하기 위한 Kubernetes Object

PV(PersistentVolume) : Kubernetes Cluster 외부의 스토리지 장비와 Kubernetes Cluster를 연결하기 위한 Kubernetes Object
PVC(PersistentVolumeClaim) : PV와 파드를 연결하여 볼륨을 사용할 수 있도록 하는 Kubernetes Object (PV가 먼저 생성되어야 함.)
참조 : https://kubernetes.io/docs/concepts/storage/persistent-volumes/




